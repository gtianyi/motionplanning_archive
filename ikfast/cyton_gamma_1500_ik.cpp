/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-03-05 19:05:26.001775
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58;
x0=IKcos(j[2]);
x1=IKsin(j[4]);
x2=IKcos(j[3]);
x3=IKcos(j[4]);
x4=IKsin(j[2]);
x5=IKsin(j[6]);
x6=IKsin(j[5]);
x7=IKsin(j[1]);
x8=IKsin(j[3]);
x9=IKcos(j[5]);
x10=IKcos(j[1]);
x11=IKcos(j[6]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((1.0)*x0);
x15=((1.0)*x10);
x16=((1.0)*x3);
x17=((1.0)*x5);
x18=((1.0)*x9);
x19=((1.0)*x11);
x20=((1.0)*x6);
x21=((1.0)*x1);
x22=(x1*x4);
x23=((-1.0)*x10);
x24=(x7*x8);
x25=(x2*x7);
x26=(x0*x10);
x27=((-1.0)*x3);
x28=(x4*x8);
x29=(x4*x7);
x30=(x3*x4);
x31=(x10*x2);
x32=(x10*x30);
x33=(x2*x21*x4);
x34=(x16*x29);
x35=((((-1.0)*x14*x24))+x31);
x36=((((-1.0)*x14*x31))+x24);
x37=((((-1.0)*x14*x25))+(((-1.0)*x15*x8)));
x38=(((x16*x2*x4))+((x1*x14)));
x39=(x35*x9);
x40=((((-1.0)*x10*x14*x8))+(((-1.0)*x25)));
x41=(((x10*x14*x8))+(((1.0)*x25)));
x42=(x1*x36);
x43=(x3*x36);
x44=(x40*x9);
x45=(x1*x37);
x46=((-1.0)*x37);
x47=(x3*x37);
x48=((((-1.0)*x18*x28))+((x38*x6)));
x49=(((x22*x7))+x47);
x50=((((-1.0)*x38*x9))+(((-1.0)*x20*x28)));
x51=((((-1.0)*x15*x22))+(((-1.0)*x16*x36)));
x52=(x45+((x27*x29)));
x53=(((x27*x36))+((x22*x23)));
x54=(x53*x6);
x55=(x11*x52);
x56=(((x11*(((((-1.0)*x33))+((x0*x3))))))+((x48*x5)));
x57=(((x11*x48))+((x5*(((((-1.0)*x14*x3))+x33)))));
x58=(((x6*(((((-1.0)*x21*x29))+(((-1.0)*x16*x37))))))+x39);
eerot[0]=(((x13*x56))+((x12*(((((-1.0)*x19*x52))+(((-1.0)*x17*x58)))))));
eerot[1]=(((x13*x57))+(((-1.0)*x12*(((((1.0)*x17*(((((-1.0)*x45))+x34))))+(((1.0)*x19*x58)))))));
eerot[2]=(((x13*x50))+((x12*(((((-1.0)*x18*x49))+(((-1.0)*x20*x35)))))));
eetrans[0]=((((((-0.0215)+(((((((((((-0.00232)*(IKcos(j[2]))*(IKsin(j[4]))))+(((-0.00232)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKsin(j[5]))))+(((0.00232)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.0718)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((((((0.0079)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((-0.0079)*(IKcos(j[2]))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((-0.13084)*(IKsin(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((((((-0.13084)*(IKcos(j[2]))*(IKsin(j[4]))))+(((-0.13084)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((-0.0718)*(IKcos(j[2]))*(IKsin(j[4]))))+(((((((-0.00232)*(IKcos(j[2]))*(IKcos(j[4]))))+(((0.00232)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((-0.1158)*(IKsin(j[2]))))+(((0.0009)*(IKcos(j[2]))))+(((-0.09746)*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((-0.0079)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((0.0079)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((0.0079)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[0]))))+(((((((0.1158)*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.09746)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((-1.0)*(((((0.0079)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.0079)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.0079)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[6]))))+(((((((0.0718)*(IKcos(j[1]))*(IKsin(j[3]))))+(((0.0718)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((((((-1.0)*(((((-0.0079)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.0079)*(((((1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((-1.0)*(((((-0.0079)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.0079)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((-1.0)*(((((-0.13084)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.13084)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.13084)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.13084)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.13084)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.0009)*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.0718)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-0.00232)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-1.0)*(((((0.00232)*(IKcos(j[1]))*(IKsin(j[3]))))+(((0.00232)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((-0.0001)*(IKcos(j[1]))))+(((0.09746)*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.00232)*(((((1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.00232)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-1.0)*(((((0.00232)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.00232)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((0.1255)*(IKsin(j[1]))))))*(IKsin(j[0]))))+(((0.0205)*(IKcos(j[0])))));
eerot[3]=(((x12*x56))+((x13*((x55+((x5*x58)))))));
eerot[4]=(((x12*x57))+((x13*((((x11*((((x6*((((x27*x37))+(((-1.0)*x22*x7))))))+x39))))+((x5*((x34+(((-1.0)*x21*x37)))))))))));
eerot[5]=(((x12*x50))+((x13*((((x35*x6))+((x49*x9)))))));
eetrans[1]=((((((-0.0215)+(((((((((((-0.00232)*(IKcos(j[2]))*(IKsin(j[4]))))+(((-0.00232)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKsin(j[5]))))+(((0.00232)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.0718)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((((((0.0079)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((-0.0079)*(IKcos(j[2]))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((-0.13084)*(IKsin(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((((((-0.13084)*(IKcos(j[2]))*(IKsin(j[4]))))+(((-0.13084)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((-0.0718)*(IKcos(j[2]))*(IKsin(j[4]))))+(((((((-0.00232)*(IKcos(j[2]))*(IKcos(j[4]))))+(((0.00232)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((-0.1158)*(IKsin(j[2]))))+(((0.0009)*(IKcos(j[2]))))+(((-0.09746)*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((-0.0079)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((0.0079)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((0.0079)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))))*(IKsin(j[0]))))+(((((((((((0.13084)*(IKcos(j[1]))*(IKcos(j[3]))))+(((-0.13084)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((((((0.00232)*(IKcos(j[1]))*(IKsin(j[3]))))+(((0.00232)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((0.00232)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[6]))))+(((0.0001)*(IKcos(j[1]))))+(((-0.1255)*(IKsin(j[1]))))+(((((((-0.0718)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.0718)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.0718)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((((((-0.13084)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.13084)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.13084)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((((((-0.0079)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.0079)*(((((1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.0079)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.0079)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.09746)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.1158)*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.09746)*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((((((0.00232)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.00232)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((-0.00232)*(((((1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.00232)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((((((0.0079)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.0079)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.0079)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[6]))))+(((-0.0009)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[0]))))+(((0.0205)*(IKsin(j[0])))));
eerot[6]=(((x11*((((x15*x30))+(((-1.0)*x21*x36))))))+((x5*(((((-1.0)*x44))+(((-1.0)*x54)))))));
eerot[7]=(((x5*((((x23*x30))+x42))))+((x11*(((((-1.0)*x18*x40))+(((-1.0)*x20*x51)))))));
eerot[8]=(((x51*x9))+((x41*x6)));
IkReal x59=(x10*x22);
IkReal x60=(x2*x26);
eetrans[2]=((0.1775)+(((0.0001)*x7))+(((-0.0718)*x59))+(((0.0009)*x10*x4))+((x5*(((((0.0079)*x42))+(((-0.0079)*x32))))))+((x3*(((((0.0718)*x60))+(((-0.0718)*x24))))))+((x6*(((((0.13084)*x26*x8))+(((0.13084)*x25))))))+(((-0.09746)*x24))+((x9*(((((-0.13084)*x43))+(((-0.13084)*x59))))))+(((0.09746)*x60))+((x5*(((((0.00232)*x44))+(((0.00232)*x54))))))+(((0.1158)*x26))+((x11*(((((0.00232)*x42))+(((-0.00232)*x32))))))+((x11*(((((-0.0079)*x44))+(((-0.0079)*x54))))))+(((0.1255)*x10)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r20);
new_r01=((-1.0)*r21);
new_r02=((-1.0)*r22);
new_px=((0.1775)+(((-0.00232)*r20))+(((-1.0)*pz))+(((0.13084)*r22))+(((0.0079)*r21)));
new_r10=((((-1.0)*r00*(IKsin(j0))))+((r10*(IKcos(j0)))));
new_r11=((((-1.0)*r01*(IKsin(j0))))+((r11*(IKcos(j0)))));
new_r12=((((-1.0)*r02*(IKsin(j0))))+((r12*(IKcos(j0)))));
IkReal x61=IKsin(j0);
IkReal x62=IKcos(j0);
new_py=((((-0.00232)*r00*x61))+(((-0.0079)*r11*x62))+(((-0.13084)*r12*x62))+(((-1.0)*px*x61))+(((0.0079)*r01*x61))+(((0.13084)*r02*x61))+((py*x62))+(((0.00232)*r10*x62)));
new_r20=(((r00*(IKcos(j0))))+((r10*(IKsin(j0)))));
new_r21=(((r01*(IKcos(j0))))+((r11*(IKsin(j0)))));
new_r22=(((r12*(IKsin(j0))))+((r02*(IKcos(j0)))));
IkReal x63=IKsin(j0);
IkReal x64=IKcos(j0);
new_pz=((-0.0205)+(((-0.13084)*r02*x64))+(((-0.0079)*r11*x63))+((px*x64))+(((-0.13084)*r12*x63))+(((-0.0079)*r01*x64))+(((0.00232)*r00*x64))+((py*x63))+(((0.00232)*r10*x63)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=((4.65642222222222)*npy);
IkReal x69=((0.773926784595556)*r21);
IkReal x70=((0.00155502844444444)*r00);
IkReal x71=((0.0180218)*r12);
IkReal x72=((0.022571736)*r01);
IkReal x73=((0.000465642222222222)*r11);
IkReal x74=((0.0216577777777778)*rxp1_0);
IkReal x75=((15.5502844444444)*rxp0_2);
IkReal x76=((0.251)*py);
IkReal x77=((0.1436)*npz);
IkReal x78=((0.00271805111111111)*r21);
IkReal x79=((0.00155502844444444)*r10);
IkReal x80=((0.000465642222222222)*r01);
IkReal x81=((0.022571736)*r11);
IkReal x82=((0.0030874)*r22);
IkReal x83=((0.251)*px);
IkReal x84=((0.0216577777777778)*rxp1_1);
IkReal x85=((1.0)*pp);
IkReal x86=((0.043)*pz);
IkReal x87=((0.0180218)*r02);
IkReal x88=((0.00923455776728914)*pp);
IkReal x89=((1.436e-5)*r10);
IkReal x90=((0.00020844)*r11);
IkReal x91=((0.00231787399958957)*px);
IkReal x92=((0.000397085983993433)*pz);
IkReal x93=((4.3e-6)*r01);
IkReal x94=((0.000166423353170531)*r02);
IkReal x95=((0.0002)*rxp1_1);
IkReal x96=((2.85107736507285e-5)*r22);
IkReal x97=((0.00132608249538272)*npz);
IkReal x98=((2.51e-5)*r21);
IkReal x99=((0.043)*npy);
IkReal x100=((0.0071468716)*r21);
IkReal x101=((0.0002)*rxp1_0);
IkReal x102=((0.00231787399958957)*py);
IkReal x103=((4.3e-6)*r11);
IkReal x104=((0.000166423353170531)*r12);
IkReal x105=((0.1436)*rxp0_2);
IkReal x106=((1.436e-5)*r00);
IkReal x107=((0.00020844)*r01);
IkReal x108=((0.251)*rxp1_2);
IkReal x109=((0.00366838620972707)*r22);
IkReal x110=((0.0030874)*r00);
IkReal x111=((0.17062261440591)*npz);
IkReal x112=((0.0214131381079417)*r02);
IkReal x113=((0.1436)*rxp0_1);
IkReal x114=((0.043)*rxp1_0);
IkReal x115=((0.0252781284)*r11);
IkReal x116=((0.0180218)*r20);
IkReal x117=((0.0510917299404884)*pz);
IkReal x118=((1.18817976605787)*pp);
IkReal x119=((0.298233121280525)*px);
IkReal x120=((0.1436)*rxp0_0);
IkReal x121=((0.0252781284)*r01);
IkReal x122=((0.0030874)*r10);
IkReal x123=((0.0002)*rxp1_2);
IkReal x124=((0.0214131381079417)*r12);
IkReal x125=((0.043)*rxp1_1);
IkReal x126=((1.436e-5)*r20);
IkReal x127=((0.298233121280525)*py);
IkReal x128=((0.00020844)*r21);
IkReal x129=(pp*r01);
IkReal x130=(pp*r11);
IkReal x131=((2.872e-5)*r21);
IkReal x132=((0.2872)*rxp1_0);
IkReal x133=((0.0061748)*r11);
IkReal x134=((0.0004)*rxp0_2);
IkReal x135=((0.086)*rxp0_1);
IkReal x136=((0.0360436)*r21);
IkReal x137=((0.502)*rxp0_2);
IkReal x138=((0.086)*rxp0_0);
IkReal x139=((0.0061748)*r01);
IkReal x140=((0.2872)*rxp1_1);
IkReal x141=((0.0257333333333333)*rxp1_0);
IkReal x142=((18.4765333333333)*rxp0_2);
IkReal x143=((0.000553266666666667)*r11);
IkReal x144=((0.0015411516)*r11);
IkReal x145=((0.00322953333333333)*r21);
IkReal x146=((0.00184765333333333)*r10);
IkReal x147=((0.000553266666666667)*r01);
IkReal x148=((0.0257333333333333)*rxp1_1);
IkReal x149=((0.000931284444444444)*r12);
IkReal x150=((0.0433155555555556)*rxp2_0);
IkReal x151=((0.0360436)*r11);
IkReal x152=((1.54785356919111)*r22);
IkReal x153=((0.045143472)*r02);
IkReal x154=((9.31284444444444)*npz);
IkReal x155=((0.2872)*npy);
IkReal x156=((0.0433155555555556)*rxp2_1);
IkReal x157=((0.0061748)*r21);
IkReal x158=((0.000931284444444444)*r02);
IkReal x159=((0.00543610222222222)*r22);
IkReal x160=((0.0360436)*r01);
IkReal x161=((0.045143472)*r12);
IkReal x162=((0.0004)*rxp2_1);
IkReal x163=((5.02e-5)*r22);
IkReal x164=((5.7021547301457e-5)*r21);
IkReal x165=((0.00041688)*r12);
IkReal x166=((0.00265216499076544)*npy);
IkReal x167=((8.6e-6)*r02);
IkReal x168=((0.000332846706341063)*r01);
IkReal x169=((0.00041688)*r02);
IkReal x170=((0.000332846706341063)*r11);
IkReal x171=((0.086)*npz);
IkReal x172=((8.6e-6)*r12);
IkReal x173=((0.0142937432)*r22);
IkReal x174=((0.0004)*rxp2_0);
IkReal x175=((0.0505562568)*r12);
IkReal x176=((0.00733677241945413)*r21);
IkReal x177=((0.0428262762158834)*r01);
IkReal x178=((0.34124522881182)*npy);
IkReal x179=((0.086)*rxp2_0);
IkReal x180=((0.502)*rxp2_2);
IkReal x181=((0.00041688)*r22);
IkReal x182=((0.0428262762158834)*r11);
IkReal x183=((0.086)*rxp2_1);
IkReal x184=((0.0004)*rxp2_2);
IkReal x185=((0.0505562568)*r02);
IkReal x186=((0.00311005688888889)*r01);
IkReal x187=((1.54785356919111)*r20);
IkReal x188=((0.045143472)*r00);
IkReal x189=((9.31284444444444)*npx);
IkReal x190=((31.1005688888889)*rxp1_2);
IkReal x191=((0.000931284444444444)*r10);
IkReal x192=((0.0433155555555556)*rxp0_0);
IkReal x193=((0.000931284444444444)*r00);
IkReal x194=((0.00543610222222222)*r20);
IkReal x195=((0.045143472)*r10);
IkReal x196=((0.00311005688888889)*r11);
IkReal x197=((0.0433155555555556)*rxp0_1);
IkReal x198=((0.00041688)*r10);
IkReal x199=((8.6e-6)*r00);
IkReal x200=((2.872e-5)*r11);
IkReal x201=((0.0004)*rxp0_1);
IkReal x202=((5.02e-5)*r20);
IkReal x203=((0.086)*npx);
IkReal x204=((8.6e-6)*r10);
IkReal x205=((0.0142937432)*r20);
IkReal x206=((0.0004)*rxp0_0);
IkReal x207=((0.00041688)*r00);
IkReal x208=((0.2872)*rxp1_2);
IkReal x209=((2.872e-5)*r01);
IkReal x210=(pp*r21);
IkReal x211=((0.0505562568)*r10);
IkReal x212=((0.0505562568)*r00);
IkReal x213=((0.00041688)*r20);
IkReal x214=((5.53266666666667)*npy);
IkReal x215=((0.0015411516)*r01);
IkReal x216=((0.919355705866667)*r21);
IkReal x217=((0.00184765333333333)*r00);
IkReal x218=((1.83871141173333)*r20);
IkReal x219=((11.0653333333333)*npx);
IkReal x220=((0.00369530666666667)*r01);
IkReal x221=((0.0030823032)*r00);
IkReal x222=((36.9530666666667)*rxp1_2);
IkReal x223=((0.0514666666666667)*rxp0_0);
IkReal x224=((0.00110653333333333)*r10);
IkReal x225=((0.00645906666666667)*r20);
IkReal x226=((0.00110653333333333)*r00);
IkReal x227=((0.00369530666666667)*r11);
IkReal x228=((0.0030823032)*r10);
IkReal x229=((0.0514666666666667)*rxp0_1);
IkReal x230=((2.0)*npy);
IkReal x231=((2.0)*pp);
IkReal x232=(npz*pz);
IkReal x233=(npy*pz);
IkReal x234=((4.0)*npz);
IkReal x235=((216.577777777778)*pp);
IkReal x236=((4.0)*npx);
IkReal x237=(npx*pz);
IkReal x238=((257.333333333333)*pp);
IkReal x239=((216.577777777778)*x233);
IkReal x240=((108.288888888889)*x210);
IkReal x241=(pz*x230);
IkReal x242=(py*x230);
IkReal x243=(px*x230);
IkReal x244=(r00*x231);
IkReal x245=(px*x236);
IkReal x246=(r10*x231);
IkReal x247=(py*x236);
IkReal x248=((128.666666666667)*x210);
IkReal x249=(r01*x85);
IkReal x250=(r11*x85);
IkReal x251=(r22*x235);
IkReal x252=((433.155555555556)*x232);
IkReal x253=(r22*x231);
IkReal x254=((4.0)*x232);
IkReal x255=(r12*x231);
IkReal x256=(py*x234);
IkReal x257=(px*x234);
IkReal x258=(r02*x231);
IkReal x259=((433.155555555556)*x237);
IkReal x260=(r20*x235);
IkReal x261=(r21*x85);
IkReal x262=(pz*x236);
IkReal x263=(r20*x231);
IkReal x264=((257.333333333333)*x233);
IkReal x265=((514.666666666667)*x237);
IkReal x266=(r20*x238);
IkReal x267=((0.022571736)+x113);
IkReal x268=((0.0015411716)+x83);
IkReal x269=((-2.98233121280525e-5)+x129);
IkReal x270=((2.51e-5)+x71);
IkReal x271=((2.31787399958958e-7)+x102);
IkReal x272=((-2.98233121280525e-5)+x128);
IkReal x273=(x90+x93);
IkReal x274=(x134+x131);
IkReal x275=(x105+x106);
IkReal x276=(x202+x201);
IkReal x277=(x127+x128);
IkReal x278=(x136+x227);
IkReal x279=(x122+x120);
IkReal x280=(x77+x82);
IkReal x281=(x113+x116);
IkReal x282=(x137+x229);
IkReal x283=(x157+x155);
IkReal x284=(x209+x208);
IkReal x285=(x167+x165);
IkReal x286=(x123+x121);
IkReal x287=(x142+x126);
IkReal x288=(x87+x84);
IkReal x289=(x98+x95);
IkReal x290=(x133+x132);
IkReal x291=(x140+x136);
IkReal x292=(x76+x71);
IkReal x293=(x162+x163);
IkReal x294=(x199+x198);
IkReal x295=(x86+x85);
IkReal x296=(x126+x124);
IkReal x297=(x107+x210);
IkReal x298=(x125+x243);
IkReal x299=(x212+x244);
IkReal x300=(x107+x261);
IkReal x301=(x139+x247);
IkReal x302=(x138+x246);
IkReal x303=(x207+x263);
IkReal x304=(x180+x256);
IkReal x305=(x127+x249);
IkReal x306=(x179+x255);
IkReal x307=(x169+x253);
IkReal x308=(x146+x110+x116);
IkReal x309=(x148+x114+x108);
IkReal x310=(x228+x225+x226);
IkReal x311=(x78+x80+x81);
IkReal x312=(x112+x111+x109);
IkReal x313=(x117+x119+x118);
IkReal x314=(x161+x159+x158);
IkReal x315=(x168+x166+x164);
IkReal x316=(x178+x177+x176);
IkReal x317=(x193+x195+x194);
IkReal x318=(x94+x97+x96);
IkReal x319=(x184+x185+x258);
IkReal x320=(x135+x213+x245);
IkReal x321=(x181+x183+x257);
IkReal x322=((-0.020740547088857)+x130+x115+x114);
IkReal x323=(x240+x74+x73);
IkReal x324=(x110+x108+x242);
IkReal x325=(x150+x149+x251);
IkReal x326=((-1.42320381695054e-5)+x88+x91+x92);
IkReal x327=(x192+x191+x260);
IkReal x328=(x115+x114+x250);
IkReal x329=(x326+x89);
IkReal x330=(x144+x145+x147+x242);
IkReal x331=(x108+x242+x281);
IkReal x332=(x154+x153+x152+x252);
IkReal x333=(x239+x72+x68+x69);
IkReal x334=(x187+x188+x189+x259);
IkReal x335=(x141+x143+x129+x248);
IkReal x336=(x141+x143+x249+x248);
IkReal x337=(x223+x224+x266+x244);
IkReal x338=(x318+x289);
IkReal x339=(x123+x214+x215+x216+x264);
IkReal x340=(x100+x101+x103+x241+x99);
IkReal x341=(x206+x205+x204+x203+x262);
IkReal x342=(x171+x173+x172+x174+x254);
IkReal x343=(x135+x218+x219+x221+x265+x245);
IkReal x344=((((-0.00110653333333333)*r02))+x180+(((-0.00645906666666667)*r22))+x306+(((0.0514666666666667)*rxp2_1))+(((-0.0030823032)*r12))+(((-1.0)*x256)));
IkReal x345=(x339+x217+x298);
IkReal x346=(x339+x298+x279+x287);
IkReal x347=((((-11.0653333333333)*npz))+(((-1.0)*x184))+(((-1.0)*x183))+(((-1.83871141173333)*r22))+(((-514.666666666667)*x232))+x258+(((0.0514666666666667)*rxp2_0))+(((0.00110653333333333)*r12))+(((-0.0030823032)*r02))+(((-1.0)*x257))+((r22*x238)));
op[0]=((((-1.0)*x76))+(((-1.0)*x70))+x323+x270+x75+(((-1.0)*x333)));
op[1]=((((-1.0)*x79))+(((-1.0)*x295))+x268+x280+(((-1.0)*x311))+x84+(((-1.0)*x87)));
op[2]=((((-1.0)*x190))+x186+x327+(((-1.0)*x334)));
op[3]=(x197+x196+(((-1.0)*x317)));
op[4]=((((-1.0)*x75))+(((-1.0)*x76))+(((-1.0)*x323))+x333+x270+x70);
op[5]=((((-1.0)*x295))+x311+x268+x280+x79+(((-1.0)*x288)));
op[6]=(x326+x289+(((-1.0)*x318))+(((-1.0)*x273))+(((-1.0)*x89)));
op[7]=((((-1.0)*x104))+x297+x275+x271+(((-1.0)*x340)));
op[8]=((((-1.0)*x294))+x200+x276);
op[9]=(x303+(((-1.0)*x284))+(((-1.0)*x341)));
op[10]=(x329+x273+(((-1.0)*x338)));
op[11]=((((-1.0)*x104))+x340+x271+(((-1.0)*x275))+(((-1.0)*x300)));
op[12]=((((-1.0)*x324))+x322+x312+x281+(((-1.0)*x313)));
op[13]=(x298+x296+x272+(((-1.0)*x279))+(((-1.0)*x286))+(((-1.0)*x305)));
op[14]=((((-1.0)*x291))+x139+x302+(((-1.0)*x137))+x211+(((-1.0)*x247)));
op[15]=((((-1.0)*x299))+x320+x290+(((-1.0)*x274)));
op[16]=((-0.020740547088857)+(((-1.0)*x328))+x324+x312+(((-1.0)*x313))+(((-1.0)*x281)));
op[17]=((((-1.0)*x298))+(((-1.0)*x126))+x124+x269+x279+x286+(((-1.0)*x277)));
op[18]=(x335+x279+x287+(((-1.0)*x345)));
op[19]=(x130+x309+x267+(((-1.0)*x330))+(((-1.0)*x308)));
op[20]=((((-1.0)*x290))+x337+x220+(((-1.0)*x274))+(((-1.0)*x343))+(((-1.0)*x222)));
op[21]=((((-1.0)*x140))+x139+x302+x278+x282+(((-1.0)*x310))+(((-1.0)*x247)));
op[22]=(x345+(((-1.0)*x336))+(((-1.0)*x279))+(((-1.0)*x287)));
op[23]=((0.022571736)+(((-1.0)*x113))+x308+x330+(((-1.0)*x309))+(((-1.0)*x250)));
op[24]=((((-1.0)*x151))+x325+(((-1.0)*x332)));
op[25]=(x160+x156+(((-1.0)*x314))+(((-1.0)*x283)));
op[26]=((-0.0720872)*r10);
op[27]=((((-0.0123496)*r20))+(((0.0720872)*r00))+(((-0.5744)*npx)));
op[28]=(x151+x325+(((-1.0)*x332)));
op[29]=((((-1.0)*x160))+x156+x283+(((-1.0)*x314)));
op[30]=(x315+x293+(((-1.0)*x285)));
op[31]=(x170+x307+(((-1.0)*x342)));
op[32]=((((0.000665693412682126)*r00))+(((0.000114043094602914)*r20))+(((0.00530432998153088)*npx)));
op[33]=((0.000665693412682126)*r10);
op[34]=(x293+(((-1.0)*x315))+(((-1.0)*x285)));
op[35]=((((-1.0)*x170))+x307+(((-1.0)*x342)));
op[36]=(x175+x306+(((-1.0)*x316))+(((-1.0)*x304)));
op[37]=((((-1.0)*x182))+x321+(((-1.0)*x319)));
op[38]=((((-0.0856525524317669)*r00))+(((-0.0146735448389083)*r20))+(((-0.68249045762364)*npx)));
op[39]=((-0.0856525524317669)*r10);
op[40]=(x175+x306+x316+(((-1.0)*x304)));
op[41]=(x182+x321+(((-1.0)*x319)));
op[42]=x347;
op[43]=x344;
op[44]=0;
op[45]=0;
op[46]=x347;
op[47]=x344;
op[48]=((2.51e-5)+(((-1.0)*x70))+(((-1.0)*x292))+(((-1.0)*x323))+x333+x75);
op[49]=((((-1.0)*x79))+(((-1.0)*x295))+x311+x268+x87+(((-1.0)*x280))+(((-1.0)*x84)));
op[50]=((((-1.0)*x190))+(((-1.0)*x327))+x186+x334);
op[51]=((((-1.0)*x197))+x196+x317);
op[52]=((2.51e-5)+(((-1.0)*x75))+(((-1.0)*x292))+x323+x70+(((-1.0)*x333)));
op[53]=((((-1.0)*x295))+x268+x288+(((-1.0)*x311))+x79+(((-1.0)*x280)));
op[54]=(x326+x318+x273+(((-1.0)*x289))+(((-1.0)*x89)));
op[55]=(x104+x340+x275+x271+(((-1.0)*x300)));
op[56]=(x200+x294+(((-1.0)*x276)));
op[57]=(x341+(((-1.0)*x284))+(((-1.0)*x303)));
op[58]=(x338+x329+(((-1.0)*x273)));
op[59]=(x104+x297+x271+(((-1.0)*x275))+(((-1.0)*x340)));
op[60]=((-0.020740547088857)+(((-1.0)*x328))+(((-1.0)*x110))+x331+(((-1.0)*x312))+(((-1.0)*x313)));
op[61]=((((-1.0)*x298))+(((-1.0)*x124))+x126+x269+x286+(((-1.0)*x277))+(((-1.0)*x279)));
op[62]=((((-1.0)*x291))+x137+x301+(((-1.0)*x211))+(((-1.0)*x302)));
op[63]=((((-1.0)*x320))+x134+(((-1.0)*x131))+x299+x290);
op[64]=(x110+x322+(((-1.0)*x312))+(((-1.0)*x313))+(((-1.0)*x331)));
op[65]=((((-1.0)*x296))+x298+x272+x279+(((-1.0)*x286))+(((-1.0)*x305)));
op[66]=(x346+(((-1.0)*x336))+(((-1.0)*x217)));
op[67]=(x330+x267+(((-1.0)*x309))+(((-1.0)*x308))+(((-1.0)*x250)));
op[68]=((((-1.0)*x290))+x134+x343+(((-1.0)*x131))+x220+(((-1.0)*x337))+(((-1.0)*x222)));
op[69]=((((-1.0)*x140))+x301+x310+x278+(((-1.0)*x282))+(((-1.0)*x302)));
op[70]=(x335+x217+(((-1.0)*x346)));
op[71]=((0.022571736)+(((-1.0)*x113))+x130+x308+x309+(((-1.0)*x330)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j5array[16], cj5array[16], sj5array[16], j6array[16], cj6array[16], sj6array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ij5 += 3)
{
IkReal htj5 = zeror[ij5+0], htj6 = zeror[ij5+1], htj1 = zeror[ij5+2];
if(isnan(htj5)||isnan(htj6)||isnan(htj1)){
continue;
}
j5array[numsolutions]=((2.0)*(atan(htj5)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x348=htj5*htj5;
CheckValue<IkReal> x349=IKPowWithIntegerCheck(((1.0)+x348),-1);
if(!x349.valid){
continue;
}
cj5array[numsolutions]=((x349.value)*(((1.0)+(((-1.0)*x348)))));
CheckValue<IkReal> x350=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x350.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x350.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x351=htj6*htj6;
CheckValue<IkReal> x352=IKPowWithIntegerCheck(((1.0)+x351),-1);
if(!x352.valid){
continue;
}
cj6array[numsolutions]=((x352.value)*(((1.0)+(((-1.0)*x351)))));
CheckValue<IkReal> x353=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x353.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x353.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x354=htj1*htj1;
CheckValue<IkReal> x355=IKPowWithIntegerCheck(((1.0)+x354),-1);
if(!x355.valid){
continue;
}
cj1array[numsolutions]=((x355.value)*(((1.0)+(((-1.0)*x354)))));
CheckValue<IkReal> x356=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x356.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x356.value));
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j5valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj5 = 16;
_nj6 = 1;
_nj1 = 1;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( !j5valid[iij5] ) { continue; }
if( IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij5]-cj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij5]-sj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij5]-cj1array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij5]-sj1array[iij5]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j5valid[iij5]=false; _ij5[1] = iij5; _ij6[1] = 0; _ij1[1] = 0;  break; 
}
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

    j6 = j6array[ij5]; cj6 = cj6array[ij5]; sj6 = sj6array[ij5];

    j1 = j1array[ij5]; cj1 = cj1array[ij5]; sj1 = sj1array[ij5];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j4eval[1];
IkReal x357=(cj1*cj6);
IkReal x358=((8.0)*sj5);
IkReal x359=(cj1*sj6);
IkReal x360=(sj1*sj6);
IkReal x361=((16.0)*sj5);
IkReal x362=(cj6*sj1);
IkReal x363=(cj5*r02*sj1);
IkReal x364=(cj1*cj5*r12);
IkReal x365=((((4.0)*r11*x359))+(((4.0)*r00*x362)));
IkReal x366=((((4.0)*r10*x357))+(((4.0)*r01*x360)));
j4eval[0]=((((0.5)*(IKabs(((((-16.0)*x364))+((r11*x357*x361))+(((-1.0)*r00*x360*x361))+(((-1.0)*r01*x361*x362))+(((16.0)*x363))+((r10*x359*x361)))))))+(((0.5)*(IKabs(((((-1.0)*x365))+x366)))))+(IKabs(((((-1.0)*r00*x358*x360))+(((-1.0)*r01*x358*x362))+(((-8.0)*x364))+(((8.0)*x363))+((r10*x358*x359))+((r11*x357*x358)))))+(IKabs(((((-1.0)*x366))+x365))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j3, j4]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x367=((4.0)*cj6);
IkReal x368=(r00*sj1);
IkReal x369=(cj1*r10);
IkReal x370=(sj5*sj6);
IkReal x371=(r01*sj1);
IkReal x372=((4.0)*sj6);
IkReal x373=((16.0)*cj1);
IkReal x374=(cj5*r12);
IkReal x375=(cj6*sj5);
IkReal x376=(cj1*r11);
IkReal x377=(cj5*r02*sj1);
IkReal x378=(((x367*x369))+((x371*x372)));
IkReal x379=(((x372*x376))+((x367*x368)));
IkReal x380=((((-1.0)*x378))+x379);
IkReal x381=((((-1.0)*x379))+x378);
IkReal x382=((((8.0)*x369*x370))+(((-8.0)*x371*x375))+(((-8.0)*x368*x370))+(((8.0)*x377))+(((8.0)*x375*x376))+(((-8.0)*cj1*x374)));
op[0]=x380;
op[1]=x382;
op[2]=x380;
op[3]=(((r11*x373*x375))+(((16.0)*x369*x370))+(((-1.0)*x373*x374))+(((-16.0)*x368*x370))+(((-16.0)*x371*x375))+(((16.0)*x377)));
op[4]=x381;
op[5]=x382;
op[6]=x381;
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j2eval[1];
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x383=(cj6*r11);
IkReal x384=(r10*sj6);
IkReal x385=((0.736712497434845)*sj5);
if( IKabs(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-10.2606197414324)*py))+(((-1.0)*x384*x385))+(((-1.0)*x383*x385)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*sj5))+((cj5*x384))+((cj5*x383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-10.2606197414324)*py))+(((-1.0)*x384*x385))+(((-1.0)*x383*x385))))+IKsqr((((r12*sj5))+((cj5*x384))+((cj5*x383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-10.2606197414324)*py))+(((-1.0)*x384*x385))+(((-1.0)*x383*x385))), (((r12*sj5))+((cj5*x384))+((cj5*x383))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x386=IKsin(j3);
IkReal x387=(cj4*sj5);
IkReal x388=(cj6*r11);
IkReal x389=(r10*sj6);
IkReal x390=(cj5*r12);
IkReal x391=((0.0718)*sj5);
evalcond[0]=(((r12*sj5))+(((-1.0)*(IKcos(j3))))+((cj5*x388))+((cj5*x389)));
evalcond[1]=((0.0001)+(((0.0718)*x390))+(((-1.0)*x389*x391))+(((-1.0)*x388*x391))+(((-1.0)*py))+(((-0.09746)*x386)));
evalcond[2]=(((x387*x389))+((x387*x388))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*cj4*x390))+((r11*sj4*sj6))+(((-1.0)*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x392=((1.0)*sj5);
IkReal x393=((1.0)*cj5);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
j2eval[2]=((IKabs(((((-1.0)*r00*sj6*x393))+(((-1.0)*r02*x392))+(((-1.0)*cj6*r01*x393)))))+(IKabs(((((-1.0)*cj6*r21*x393))+(((-1.0)*r20*sj6*x393))+(((-1.0)*r22*x392))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x394=(cj5*r22);
IkReal x395=((0.00422020069398856)*sj4);
IkReal x396=(r20*sj5*sj6);
IkReal x397=(cj4*cj6*r20);
IkReal x398=(cj4*r21*sj6);
IkReal x399=(cj6*r21*sj5);
if( IKabs(((-0.100815905467504)+(((0.00422020069398856)*x397))+(((-1.0)*x394*x395))+((x395*x396))+((x395*x399))+(((-4.68911188220951)*pz))+(((-0.336678233142643)*x399))+(((-0.336678233142643)*x396))+(((-0.00422020069398856)*x398))+(((0.336678233142643)*x394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x398))+x397+(((-1.0)*sj4*x394))+((sj4*x399))+((sj4*x396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.100815905467504)+(((0.00422020069398856)*x397))+(((-1.0)*x394*x395))+((x395*x396))+((x395*x399))+(((-4.68911188220951)*pz))+(((-0.336678233142643)*x399))+(((-0.336678233142643)*x396))+(((-0.00422020069398856)*x398))+(((0.336678233142643)*x394))))+IKsqr(((((-1.0)*x398))+x397+(((-1.0)*sj4*x394))+((sj4*x399))+((sj4*x396))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.100815905467504)+(((0.00422020069398856)*x397))+(((-1.0)*x394*x395))+((x395*x396))+((x395*x399))+(((-4.68911188220951)*pz))+(((-0.336678233142643)*x399))+(((-0.336678233142643)*x396))+(((-0.00422020069398856)*x398))+(((0.336678233142643)*x394))), ((((-1.0)*x398))+x397+(((-1.0)*sj4*x394))+((sj4*x399))+((sj4*x396))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x400=IKcos(j2);
IkReal x401=IKsin(j2);
IkReal x402=(sj5*sj6);
IkReal x403=(cj4*r20);
IkReal x404=(cj5*sj4);
IkReal x405=((1.0)*sj4);
IkReal x406=(cj5*r02);
IkReal x407=(r21*sj6);
IkReal x408=((1.0)*cj4);
IkReal x409=(cj5*r22);
IkReal x410=(r01*sj6);
IkReal x411=((1.0)*x401);
IkReal x412=((1.0)*cj6*r00);
IkReal x413=(cj6*r01*sj5);
IkReal x414=(cj6*r21*sj5);
evalcond[0]=((-0.0215)+(((-0.21326)*x401))+(((0.0009)*x400))+(((-1.0)*pz))+(((0.0718)*x409))+(((-0.0718)*r20*x402))+(((-0.0718)*x414)));
evalcond[1]=(((r22*x404))+(((-1.0)*cj6*x403))+(((-1.0)*r20*x402*x405))+((cj4*x407))+x400+(((-1.0)*x405*x414)));
evalcond[2]=((-0.1255)+(((-0.21326)*x400))+(((-0.0009)*x401))+(((-1.0)*px))+(((0.0718)*x406))+(((-0.0718)*r00*x402))+(((-0.0718)*x413)));
evalcond[3]=(((cj4*x414))+(((-1.0)*cj6*r20*x405))+((sj4*x407))+(((-1.0)*x411))+((x402*x403))+(((-1.0)*x408*x409)));
evalcond[4]=((((-1.0)*x406*x408))+(((-1.0)*cj6*r00*x405))+((cj4*x413))+((cj4*r00*x402))+(((-1.0)*x400))+((sj4*x410)));
evalcond[5]=((((-1.0)*cj6*r00*x408))+((cj4*x410))+(((-1.0)*x405*x413))+(((-1.0)*x411))+((r02*x404))+(((-1.0)*r00*x402*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x415=((0.191656562828474)*sj5);
IkReal x416=(cj6*r01);
IkReal x417=((3.90553484697134)*cj5);
IkReal x418=((0.191656562828474)*cj5);
IkReal x419=(r20*sj6);
IkReal x420=((3.90553484697134)*sj5);
IkReal x421=(r00*sj6);
IkReal x422=(cj6*r21);
if( IKabs(((-1.50448325689216)+(((-1.0)*x420*x422))+((r22*x417))+(((-2.6693114600066)*px))+(((-1.0)*x419*x420))+(((-1.0)*x415*x416))+(((-1.0)*x415*x421))+((r02*x418))+(((-54.39463575169)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.76913659044695)+(((-1.0)*x416*x420))+(((-1.0)*x420*x421))+((x415*x419))+(((2.6693114600066)*pz))+((x415*x422))+(((-1.0)*r22*x418))+((r02*x417))+(((-54.39463575169)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.50448325689216)+(((-1.0)*x420*x422))+((r22*x417))+(((-2.6693114600066)*px))+(((-1.0)*x419*x420))+(((-1.0)*x415*x416))+(((-1.0)*x415*x421))+((r02*x418))+(((-54.39463575169)*pz))))+IKsqr(((-6.76913659044695)+(((-1.0)*x416*x420))+(((-1.0)*x420*x421))+((x415*x419))+(((2.6693114600066)*pz))+((x415*x422))+(((-1.0)*r22*x418))+((r02*x417))+(((-54.39463575169)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.50448325689216)+(((-1.0)*x420*x422))+((r22*x417))+(((-2.6693114600066)*px))+(((-1.0)*x419*x420))+(((-1.0)*x415*x416))+(((-1.0)*x415*x421))+((r02*x418))+(((-54.39463575169)*pz))), ((-6.76913659044695)+(((-1.0)*x416*x420))+(((-1.0)*x420*x421))+((x415*x419))+(((2.6693114600066)*pz))+((x415*x422))+(((-1.0)*r22*x418))+((r02*x417))+(((-54.39463575169)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x423=IKcos(j2);
IkReal x424=IKsin(j2);
IkReal x425=(sj5*sj6);
IkReal x426=(cj4*r20);
IkReal x427=(cj5*sj4);
IkReal x428=(r01*sj5);
IkReal x429=(r21*sj5);
IkReal x430=((0.0718)*cj6);
IkReal x431=(cj5*r02);
IkReal x432=(r21*sj6);
IkReal x433=((1.0)*sj4);
IkReal x434=(cj4*cj6);
IkReal x435=((1.0)*cj4);
IkReal x436=(cj5*r22);
IkReal x437=(r01*sj6);
IkReal x438=((1.0)*cj6*r00);
IkReal x439=(cj6*x433);
evalcond[0]=(((x429*x434))+((sj4*x432))+((x425*x426))+(((-1.0)*x435*x436))+x424+(((-1.0)*r20*x439)));
evalcond[1]=(((sj4*x437))+((x428*x434))+(((-1.0)*x431*x435))+x423+(((-1.0)*r00*x439))+((cj4*r00*x425)));
evalcond[2]=((-0.0215)+(((-0.01834)*x424))+(((0.0718)*x436))+(((-1.0)*x429*x430))+(((-1.0)*pz))+(((-0.0718)*r20*x425))+(((0.0009)*x423)));
evalcond[3]=((((-1.0)*cj6*x426))+((cj4*x432))+(((-1.0)*x429*x439))+x423+(((-1.0)*r20*x425*x433))+((r22*x427)));
evalcond[4]=((-0.1255)+(((-0.01834)*x423))+(((0.0718)*x431))+(((-1.0)*px))+(((-0.0718)*r00*x425))+(((-1.0)*x428*x430))+(((-0.0009)*x424)));
evalcond[5]=((((-1.0)*x424))+(((-1.0)*r00*x425*x433))+((cj4*x437))+((r02*x427))+(((-1.0)*r00*x434))+(((-1.0)*x428*x439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x440=((1.0)*sj5);
IkReal x441=((1.0)*cj5);
if( IKabs(((((-1.0)*cj6*r21*x441))+(((-1.0)*r20*sj6*x441))+(((-1.0)*r22*x440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x441))+(((-1.0)*r02*x440))+(((-1.0)*r00*sj6*x441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r21*x441))+(((-1.0)*r20*sj6*x441))+(((-1.0)*r22*x440))))+IKsqr(((((-1.0)*cj6*r01*x441))+(((-1.0)*r02*x440))+(((-1.0)*r00*sj6*x441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj6*r21*x441))+(((-1.0)*r20*sj6*x441))+(((-1.0)*r22*x440))), ((((-1.0)*cj6*r01*x441))+(((-1.0)*r02*x440))+(((-1.0)*r00*sj6*x441))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x442=IKcos(j2);
IkReal x443=IKsin(j2);
IkReal x444=(cj5*cj6);
IkReal x445=((1.0)*cj6);
IkReal x446=(cj5*sj4);
IkReal x447=(cj5*sj6);
IkReal x448=(sj4*sj5);
IkReal x449=((0.0718)*cj5);
IkReal x450=(cj4*sj6);
IkReal x451=((1.0)*sj6);
IkReal x452=((0.0718)*sj5*sj6);
IkReal x453=((0.0718)*cj6*sj5);
evalcond[0]=(((r22*sj5))+((r21*x444))+x443+((r20*x447)));
evalcond[1]=(((r02*sj5))+x442+((r01*x444))+((r00*x447)));
evalcond[2]=((-0.0215)+(((0.0009)*x442))+(((-1.0)*pz))+((r22*x449))+(((-0.1158)*x443))+(((-1.0)*r20*x452))+(((-1.0)*r21*x453)));
evalcond[3]=((((-1.0)*r20*x448*x451))+(((-1.0)*cj4*r20*x445))+x442+((r22*x446))+(((-1.0)*r21*x445*x448))+((r21*x450)));
evalcond[4]=((-0.1255)+((r02*x449))+(((-1.0)*r00*x452))+(((-1.0)*r01*x453))+(((-1.0)*px))+(((-0.1158)*x442))+(((-0.0009)*x443)));
evalcond[5]=((((-1.0)*r01*x445*x448))+((r02*x446))+(((-1.0)*x443))+(((-1.0)*cj4*r00*x445))+(((-1.0)*r00*x448*x451))+((r01*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x454=(cj5*cj6);
IkReal x455=(cj5*sj6);
if( IKabs((((r22*sj5))+((r20*x455))+((r21*x454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj5))+((r00*x455))+((r01*x454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj5))+((r20*x455))+((r21*x454))))+IKsqr((((r02*sj5))+((r00*x455))+((r01*x454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*sj5))+((r20*x455))+((r21*x454))), (((r02*sj5))+((r00*x455))+((r01*x454))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x456=IKcos(j2);
IkReal x457=IKsin(j2);
IkReal x458=(cj5*cj6);
IkReal x459=((1.0)*cj6);
IkReal x460=(cj5*sj4);
IkReal x461=(cj5*sj6);
IkReal x462=(sj4*sj5);
IkReal x463=((0.0718)*cj5);
IkReal x464=(cj4*sj6);
IkReal x465=((1.0)*sj6);
IkReal x466=((1.0)*x457);
IkReal x467=((0.0718)*sj5*sj6);
IkReal x468=((0.0718)*cj6*sj5);
evalcond[0]=(((r22*sj5))+((r20*x461))+(((-1.0)*x466))+((r21*x458)));
evalcond[1]=((((-1.0)*x456))+((r02*sj5))+((r00*x461))+((r01*x458)));
evalcond[2]=((-0.0215)+((r22*x463))+(((-0.1158)*x457))+(((-1.0)*pz))+(((0.0009)*x456))+(((-1.0)*r21*x468))+(((-1.0)*r20*x467)));
evalcond[3]=(((r22*x460))+(((-1.0)*r20*x462*x465))+(((-1.0)*cj4*r20*x459))+x456+((r21*x464))+(((-1.0)*r21*x459*x462)));
evalcond[4]=((-0.1255)+(((-1.0)*r01*x468))+(((-1.0)*r00*x467))+(((-0.1158)*x456))+(((-1.0)*px))+((r02*x463))+(((-0.0009)*x457)));
evalcond[5]=((((-1.0)*r00*x462*x465))+(((-1.0)*x466))+((r02*x460))+((r01*x464))+(((-1.0)*r01*x459*x462))+(((-1.0)*cj4*r00*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x469=(cj4*sj5);
IkReal x470=((1.0)*cj5);
CheckValue<IkReal> x471=IKPowWithIntegerCheck(sj3,-1);
if(!x471.valid){
continue;
}
CheckValue<IkReal> x472=IKPowWithIntegerCheck(cj3,-1);
if(!x472.valid){
continue;
}
if( IKabs(((x471.value)*(((((-1.0)*r20*sj6*x470))+(((-1.0)*cj6*r21*x470))+(((-1.0)*r22*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x472.value)*(((((-1.0)*cj4*r02*x470))+((r01*sj4*sj6))+((r00*sj6*x469))+((cj6*r01*x469))+(((-1.0)*cj6*r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x471.value)*(((((-1.0)*r20*sj6*x470))+(((-1.0)*cj6*r21*x470))+(((-1.0)*r22*sj5))))))+IKsqr(((x472.value)*(((((-1.0)*cj4*r02*x470))+((r01*sj4*sj6))+((r00*sj6*x469))+((cj6*r01*x469))+(((-1.0)*cj6*r00*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x471.value)*(((((-1.0)*r20*sj6*x470))+(((-1.0)*cj6*r21*x470))+(((-1.0)*r22*sj5))))), ((x472.value)*(((((-1.0)*cj4*r02*x470))+((r01*sj4*sj6))+((r00*sj6*x469))+((cj6*r01*x469))+(((-1.0)*cj6*r00*sj4))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x473=IKcos(j2);
IkReal x474=IKsin(j2);
IkReal x475=(sj5*sj6);
IkReal x476=(cj5*cj6);
IkReal x477=(cj4*cj6);
IkReal x478=((1.0)*r00);
IkReal x479=(r01*sj5);
IkReal x480=(cj6*sj4);
IkReal x481=(cj5*r22);
IkReal x482=(cj5*sj6);
IkReal x483=((1.0)*r20);
IkReal x484=(r21*sj5);
IkReal x485=((0.0718)*cj6);
IkReal x486=(cj5*r02);
IkReal x487=((1.0)*cj4);
IkReal x488=(r21*sj6);
IkReal x489=(r01*sj6);
IkReal x490=((1.0)*x474);
IkReal x491=(cj3*x473);
evalcond[0]=(((r20*x482))+((r21*x476))+((r22*sj5))+((sj3*x474)));
evalcond[1]=(((r02*sj5))+((r00*x482))+((sj3*x473))+((r01*x476)));
evalcond[2]=(((sj4*x481))+((cj4*x488))+x473+(((-1.0)*x477*x483))+(((-1.0)*x480*x484))+(((-1.0)*sj4*x475*x483)));
evalcond[3]=((((-1.0)*cj3*x490))+((sj4*x488))+((cj4*r20*x475))+(((-1.0)*x481*x487))+(((-1.0)*x480*x483))+((x477*x484)));
evalcond[4]=((((-1.0)*x490))+(((-1.0)*x477*x478))+((sj4*x486))+((cj4*x489))+(((-1.0)*sj4*x475*x478))+(((-1.0)*x479*x480)));
evalcond[5]=((((-1.0)*x486*x487))+((cj4*r00*x475))+((sj4*x489))+(((-1.0)*x491))+((x477*x479))+(((-1.0)*x478*x480)));
evalcond[6]=((-0.0215)+(((-1.0)*x484*x485))+(((-0.0718)*r20*x475))+(((-0.1158)*x474))+(((-1.0)*pz))+(((-0.09746)*cj3*x474))+(((0.0718)*x481))+(((0.0009)*x473)));
evalcond[7]=((-0.1255)+(((-0.0718)*r00*x475))+(((-0.1158)*x473))+(((-1.0)*px))+(((-0.0009)*x474))+(((-1.0)*x479*x485))+(((0.0718)*x486))+(((-0.09746)*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x492=(r20*sj6);
IkReal x493=(sj4*sj5);
IkReal x494=((1.0)*r22);
IkReal x495=((1.0)*r21);
CheckValue<IkReal> x496=IKPowWithIntegerCheck(sj3,-1);
if(!x496.valid){
continue;
}
if( IKabs(((x496.value)*(((((-1.0)*cj5*x492))+(((-1.0)*sj5*x494))+(((-1.0)*cj5*cj6*x495)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*sj4*x494))+((cj4*cj6*r20))+((cj6*r21*x493))+((x492*x493))+(((-1.0)*cj4*sj6*x495)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x496.value)*(((((-1.0)*cj5*x492))+(((-1.0)*sj5*x494))+(((-1.0)*cj5*cj6*x495))))))+IKsqr(((((-1.0)*cj5*sj4*x494))+((cj4*cj6*r20))+((cj6*r21*x493))+((x492*x493))+(((-1.0)*cj4*sj6*x495))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x496.value)*(((((-1.0)*cj5*x492))+(((-1.0)*sj5*x494))+(((-1.0)*cj5*cj6*x495))))), ((((-1.0)*cj5*sj4*x494))+((cj4*cj6*r20))+((cj6*r21*x493))+((x492*x493))+(((-1.0)*cj4*sj6*x495))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x497=IKcos(j2);
IkReal x498=IKsin(j2);
IkReal x499=(sj5*sj6);
IkReal x500=(cj5*cj6);
IkReal x501=(cj4*cj6);
IkReal x502=((1.0)*r00);
IkReal x503=(r01*sj5);
IkReal x504=(cj6*sj4);
IkReal x505=(cj5*r22);
IkReal x506=(cj5*sj6);
IkReal x507=((1.0)*r20);
IkReal x508=(r21*sj5);
IkReal x509=((0.0718)*cj6);
IkReal x510=(cj5*r02);
IkReal x511=((1.0)*cj4);
IkReal x512=(r21*sj6);
IkReal x513=(r01*sj6);
IkReal x514=((1.0)*x498);
IkReal x515=(cj3*x497);
evalcond[0]=(((r20*x506))+((r21*x500))+((r22*sj5))+((sj3*x498)));
evalcond[1]=(((r02*sj5))+((r01*x500))+((r00*x506))+((sj3*x497)));
evalcond[2]=((((-1.0)*sj4*x499*x507))+((cj4*x512))+(((-1.0)*x501*x507))+x497+((sj4*x505))+(((-1.0)*x504*x508)));
evalcond[3]=(((sj4*x512))+(((-1.0)*cj3*x514))+((x501*x508))+(((-1.0)*x505*x511))+((cj4*r20*x499))+(((-1.0)*x504*x507)));
evalcond[4]=((((-1.0)*sj4*x499*x502))+((cj4*x513))+((sj4*x510))+(((-1.0)*x501*x502))+(((-1.0)*x514))+(((-1.0)*x503*x504)));
evalcond[5]=(((cj4*r00*x499))+((sj4*x513))+(((-1.0)*x515))+(((-1.0)*x502*x504))+((x501*x503))+(((-1.0)*x510*x511)));
evalcond[6]=((-0.0215)+(((0.0009)*x497))+(((-1.0)*x508*x509))+(((-0.0718)*r20*x499))+(((-1.0)*pz))+(((-0.09746)*cj3*x498))+(((0.0718)*x505))+(((-0.1158)*x498)));
evalcond[7]=((-0.1255)+(((-0.09746)*x515))+(((-0.0009)*x498))+(((0.0718)*x510))+(((-1.0)*x503*x509))+(((-1.0)*px))+(((-0.0718)*r00*x499))+(((-0.1158)*x497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x516=((1.0)*sj5);
IkReal x517=((1.0)*cj5);
CheckValue<IkReal> x518=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x518.valid){
continue;
}
CheckValue<IkReal> x519 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x517))+(((-1.0)*r22*x516))+(((-1.0)*cj6*r21*x517)))),IkReal(((((-1.0)*r02*x516))+(((-1.0)*cj6*r01*x517))+(((-1.0)*r00*sj6*x517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x519.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x518.value)))+(x519.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x520=IKcos(j2);
IkReal x521=IKsin(j2);
IkReal x522=(sj5*sj6);
IkReal x523=(cj5*cj6);
IkReal x524=(cj4*cj6);
IkReal x525=((1.0)*r00);
IkReal x526=(r01*sj5);
IkReal x527=(cj6*sj4);
IkReal x528=(cj5*r22);
IkReal x529=(cj5*sj6);
IkReal x530=((1.0)*r20);
IkReal x531=(r21*sj5);
IkReal x532=((0.0718)*cj6);
IkReal x533=(cj5*r02);
IkReal x534=((1.0)*cj4);
IkReal x535=(r21*sj6);
IkReal x536=(r01*sj6);
IkReal x537=((1.0)*x521);
IkReal x538=(cj3*x520);
evalcond[0]=(((r21*x523))+((r20*x529))+((r22*sj5))+((sj3*x521)));
evalcond[1]=(((sj3*x520))+((r02*sj5))+((r01*x523))+((r00*x529)));
evalcond[2]=((((-1.0)*x524*x530))+((cj4*x535))+(((-1.0)*sj4*x522*x530))+(((-1.0)*x527*x531))+x520+((sj4*x528)));
evalcond[3]=((((-1.0)*cj3*x537))+(((-1.0)*x527*x530))+(((-1.0)*x528*x534))+((cj4*r20*x522))+((x524*x531))+((sj4*x535)));
evalcond[4]=((((-1.0)*x526*x527))+(((-1.0)*x524*x525))+((cj4*x536))+(((-1.0)*sj4*x522*x525))+(((-1.0)*x537))+((sj4*x533)));
evalcond[5]=((((-1.0)*x525*x527))+(((-1.0)*x533*x534))+(((-1.0)*x538))+((cj4*r00*x522))+((x524*x526))+((sj4*x536)));
evalcond[6]=((-0.0215)+(((-0.0718)*r20*x522))+(((-0.09746)*cj3*x521))+(((0.0718)*x528))+(((-1.0)*x531*x532))+(((-1.0)*pz))+(((0.0009)*x520))+(((-0.1158)*x521)));
evalcond[7]=((-0.1255)+(((-1.0)*x526*x532))+(((-0.09746)*x538))+(((0.0718)*x533))+(((-1.0)*px))+(((-0.0009)*x521))+(((-0.1158)*x520))+(((-0.0718)*r00*x522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x539=((1.0)*cj5);
IkReal x540=(r10*sj6);
IkReal x541=(cj6*r11);
IkReal x542=((0.736712497434845)*sj5);
if( IKabs(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+((x541*x542))+((x540*x542))+(((10.2606197414324)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x539*x541))+(((-1.0)*x539*x540))+(((-1.0)*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+((x541*x542))+((x540*x542))+(((10.2606197414324)*py))))+IKsqr(((((-1.0)*x539*x541))+(((-1.0)*x539*x540))+(((-1.0)*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+((x541*x542))+((x540*x542))+(((10.2606197414324)*py))), ((((-1.0)*x539*x541))+(((-1.0)*x539*x540))+(((-1.0)*r12*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x543=IKsin(j3);
IkReal x544=(cj4*sj5);
IkReal x545=(cj6*r11);
IkReal x546=(r10*sj6);
IkReal x547=(cj5*r12);
IkReal x548=((0.0718)*sj5);
evalcond[0]=(((cj5*x546))+((cj5*x545))+(IKcos(j3))+((r12*sj5)));
evalcond[1]=((-0.0001)+(((-1.0)*x545*x548))+(((0.0718)*x547))+(((-1.0)*py))+(((0.09746)*x543))+(((-1.0)*x546*x548)));
evalcond[2]=(((x544*x546))+((x544*x545))+(((-1.0)*cj6*r10*sj4))+((r11*sj4*sj6))+x543+(((-1.0)*cj4*x547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x549=((1.0)*cj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs(((((-1.0)*cj6*r21*x549))+(((-1.0)*r20*sj6*x549))+(((-1.0)*r22*sj5))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x550=((0.0014208244081433)*cj5);
IkReal x551=((0.33667223697849)*cj5);
IkReal x552=((0.33667223697849)*sj5);
IkReal x553=(r00*sj6);
IkReal x554=((0.0014208244081433)*cj6*sj5);
IkReal x555=(r20*sj5*sj6);
if( IKabs(((-0.103297584376873)+(((-4.68902837017395)*pz))+(((-1.0)*r02*x550))+(((-1.0)*cj6*r21*x552))+(((0.0014208244081433)*sj5*x553))+((r22*x551))+((r01*x554))+(((0.0197886407819401)*px))+(((-1.0)*r20*sj6*x552)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.588047604680019)+(((-1.0)*r22*x550))+(((-1.0)*r02*x551))+((cj6*r01*x552))+(((0.0014208244081433)*x555))+((r21*x554))+(((0.0197886407819401)*pz))+((x552*x553))+(((4.68902837017395)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.103297584376873)+(((-4.68902837017395)*pz))+(((-1.0)*r02*x550))+(((-1.0)*cj6*r21*x552))+(((0.0014208244081433)*sj5*x553))+((r22*x551))+((r01*x554))+(((0.0197886407819401)*px))+(((-1.0)*r20*sj6*x552))))+IKsqr(((-0.588047604680019)+(((-1.0)*r22*x550))+(((-1.0)*r02*x551))+((cj6*r01*x552))+(((0.0014208244081433)*x555))+((r21*x554))+(((0.0197886407819401)*pz))+((x552*x553))+(((4.68902837017395)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.103297584376873)+(((-4.68902837017395)*pz))+(((-1.0)*r02*x550))+(((-1.0)*cj6*r21*x552))+(((0.0014208244081433)*sj5*x553))+((r22*x551))+((r01*x554))+(((0.0197886407819401)*px))+(((-1.0)*r20*sj6*x552))), ((-0.588047604680019)+(((-1.0)*r22*x550))+(((-1.0)*r02*x551))+((cj6*r01*x552))+(((0.0014208244081433)*x555))+((r21*x554))+(((0.0197886407819401)*pz))+((x552*x553))+(((4.68902837017395)*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x556=IKcos(j2);
IkReal x557=IKsin(j2);
IkReal x558=(sj5*sj6);
IkReal x559=((1.0)*cj4);
IkReal x560=(cj6*r00);
IkReal x561=(cj5*r22);
IkReal x562=((1.0)*sj4);
IkReal x563=(cj6*sj5);
IkReal x564=(cj6*r20);
IkReal x565=(cj5*r02);
IkReal x566=(cj4*r21);
IkReal x567=(sj4*sj6);
IkReal x568=(cj4*r01);
evalcond[0]=(((r01*x567))+((cj4*r00*x558))+((x563*x568))+(((-1.0)*x559*x565))+(((-1.0)*x560*x562))+x556);
evalcond[1]=((-0.0215)+(((-0.0718)*r20*x558))+(((-0.0718)*r21*x563))+(((-1.0)*pz))+(((0.0009)*x556))+(((0.0718)*x561))+(((-0.21326)*x557)));
evalcond[2]=(((sj6*x566))+(((-1.0)*r21*x562*x563))+(((-1.0)*r20*x558*x562))+((sj4*x561))+(((-1.0)*x559*x564))+x556);
evalcond[3]=(((sj6*x568))+(((-1.0)*r01*x562*x563))+((sj4*x565))+(((-1.0)*x559*x560))+x557+(((-1.0)*r00*x558*x562)));
evalcond[4]=((0.1255)+(((0.21326)*x556))+(((-1.0)*px))+(((0.0009)*x557))+(((-0.0718)*r01*x563))+(((-0.0718)*r00*x558))+(((0.0718)*x565)));
evalcond[5]=((((-1.0)*x557))+((r21*x567))+((x563*x566))+(((-1.0)*x562*x564))+(((-1.0)*x559*x561))+((cj4*r20*x558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x569=(cj5*r22);
IkReal x570=(sj5*sj6);
IkReal x571=(cj5*r02);
IkReal x572=((0.191656562828474)*cj6*sj5);
IkReal x573=((3.90553484697134)*cj6*sj5);
if( IKabs(((-1.50448325689216)+((r01*x572))+(((-3.90553484697134)*r20*x570))+(((2.6693114600066)*px))+(((-1.0)*r21*x573))+(((-0.191656562828474)*x571))+(((0.191656562828474)*r00*x570))+(((3.90553484697134)*x569))+(((-54.39463575169)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.76913659044695)+((r01*x573))+(((3.90553484697134)*r00*x570))+(((-0.191656562828474)*x569))+(((2.6693114600066)*pz))+((r21*x572))+(((0.191656562828474)*r20*x570))+(((54.39463575169)*px))+(((-3.90553484697134)*x571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.50448325689216)+((r01*x572))+(((-3.90553484697134)*r20*x570))+(((2.6693114600066)*px))+(((-1.0)*r21*x573))+(((-0.191656562828474)*x571))+(((0.191656562828474)*r00*x570))+(((3.90553484697134)*x569))+(((-54.39463575169)*pz))))+IKsqr(((-6.76913659044695)+((r01*x573))+(((3.90553484697134)*r00*x570))+(((-0.191656562828474)*x569))+(((2.6693114600066)*pz))+((r21*x572))+(((0.191656562828474)*r20*x570))+(((54.39463575169)*px))+(((-3.90553484697134)*x571))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.50448325689216)+((r01*x572))+(((-3.90553484697134)*r20*x570))+(((2.6693114600066)*px))+(((-1.0)*r21*x573))+(((-0.191656562828474)*x571))+(((0.191656562828474)*r00*x570))+(((3.90553484697134)*x569))+(((-54.39463575169)*pz))), ((-6.76913659044695)+((r01*x573))+(((3.90553484697134)*r00*x570))+(((-0.191656562828474)*x569))+(((2.6693114600066)*pz))+((r21*x572))+(((0.191656562828474)*r20*x570))+(((54.39463575169)*px))+(((-3.90553484697134)*x571))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x574=IKsin(j2);
IkReal x575=IKcos(j2);
IkReal x576=(sj5*sj6);
IkReal x577=(cj4*r20);
IkReal x578=(cj5*r22);
IkReal x579=((1.0)*sj4);
IkReal x580=(cj5*r02);
IkReal x581=((1.0)*cj4);
IkReal x582=(r21*sj6);
IkReal x583=(r01*sj6);
IkReal x584=((1.0)*cj6*r00);
IkReal x585=(cj6*r01*sj5);
IkReal x586=(cj6*r21*sj5);
evalcond[0]=(((x576*x577))+(((-1.0)*x578*x581))+((cj4*x586))+x574+((sj4*x582))+(((-1.0)*cj6*r20*x579)));
evalcond[1]=((-0.0215)+(((0.0718)*x578))+(((-0.01834)*x574))+(((-0.0718)*r20*x576))+(((0.0009)*x575))+(((-1.0)*pz))+(((-0.0718)*x586)));
evalcond[2]=(((sj4*x578))+(((-1.0)*x579*x586))+((cj4*x582))+(((-1.0)*cj6*x577))+(((-1.0)*r20*x576*x579))+x575);
evalcond[3]=((((-1.0)*cj6*r00*x581))+(((-1.0)*x579*x585))+((cj4*x583))+x574+((sj4*x580))+(((-1.0)*r00*x576*x579)));
evalcond[4]=((0.1255)+(((-0.0718)*r00*x576))+(((0.0718)*x580))+(((0.0009)*x574))+(((-1.0)*px))+(((-0.0718)*x585))+(((0.01834)*x575)));
evalcond[5]=((((-1.0)*x580*x581))+((cj4*x585))+(((-1.0)*x575))+(((-1.0)*cj6*r00*x579))+((cj4*r00*x576))+((sj4*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x587=((1.0)*cj5);
if( IKabs(((((-1.0)*r20*sj6*x587))+(((-1.0)*cj6*r21*x587))+(((-1.0)*r22*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj6*x587))+(((-1.0)*cj6*r21*x587))+(((-1.0)*r22*sj5))))+IKsqr((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*sj6*x587))+(((-1.0)*cj6*r21*x587))+(((-1.0)*r22*sj5))), (((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x588=IKcos(j2);
IkReal x589=IKsin(j2);
IkReal x590=(cj5*cj6);
IkReal x591=((1.0)*cj6);
IkReal x592=(cj5*sj4);
IkReal x593=(cj5*sj6);
IkReal x594=(sj4*sj5);
IkReal x595=((0.0718)*cj5);
IkReal x596=(cj4*sj6);
IkReal x597=((1.0)*sj6);
IkReal x598=((0.0718)*sj5*sj6);
IkReal x599=((0.0718)*cj6*sj5);
evalcond[0]=(((r22*sj5))+((r21*x590))+x589+((r20*x593)));
evalcond[1]=((((-1.0)*x588))+((r01*x590))+((r00*x593))+((r02*sj5)));
evalcond[2]=((-0.0215)+(((-1.0)*r21*x599))+((r22*x595))+(((-1.0)*r20*x598))+(((0.0009)*x588))+(((-1.0)*pz))+(((-0.1158)*x589)));
evalcond[3]=((((-1.0)*r20*x594*x597))+((r22*x592))+(((-1.0)*cj4*r20*x591))+((r21*x596))+x588+(((-1.0)*r21*x591*x594)));
evalcond[4]=((((-1.0)*cj4*r00*x591))+(((-1.0)*r01*x591*x594))+((r01*x596))+((r02*x592))+x589+(((-1.0)*r00*x594*x597)));
evalcond[5]=((0.1255)+(((-1.0)*r01*x599))+(((-1.0)*r00*x598))+(((0.0009)*x589))+(((0.1158)*x588))+(((-1.0)*px))+((r02*x595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x600=(cj5*cj6);
IkReal x601=(cj5*sj6);
if( IKabs((((r20*x601))+((r22*sj5))+((r21*x600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*sj5))+(((-1.0)*r00*x601))+(((-1.0)*r01*x600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x601))+((r22*sj5))+((r21*x600))))+IKsqr(((((-1.0)*r02*sj5))+(((-1.0)*r00*x601))+(((-1.0)*r01*x600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x601))+((r22*sj5))+((r21*x600))), ((((-1.0)*r02*sj5))+(((-1.0)*r00*x601))+(((-1.0)*r01*x600))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x602=IKcos(j2);
IkReal x603=IKsin(j2);
IkReal x604=(cj5*cj6);
IkReal x605=((1.0)*cj6);
IkReal x606=(cj5*sj4);
IkReal x607=(cj5*sj6);
IkReal x608=(sj4*sj5);
IkReal x609=((0.0718)*cj5);
IkReal x610=(cj4*sj6);
IkReal x611=((1.0)*sj6);
IkReal x612=((0.0718)*sj5*sj6);
IkReal x613=((0.0718)*cj6*sj5);
evalcond[0]=(((r00*x607))+((r02*sj5))+x602+((r01*x604)));
evalcond[1]=(((r20*x607))+((r22*sj5))+((r21*x604))+(((-1.0)*x603)));
evalcond[2]=((-0.0215)+(((-1.0)*r20*x612))+(((-1.0)*r21*x613))+(((0.0009)*x602))+(((-1.0)*pz))+(((-0.1158)*x603))+((r22*x609)));
evalcond[3]=((((-1.0)*r21*x605*x608))+(((-1.0)*cj4*r20*x605))+((r21*x610))+x602+(((-1.0)*r20*x608*x611))+((r22*x606)));
evalcond[4]=(((r01*x610))+(((-1.0)*r00*x608*x611))+(((-1.0)*r01*x605*x608))+x603+((r02*x606))+(((-1.0)*cj4*r00*x605)));
evalcond[5]=((0.1255)+(((-1.0)*r00*x612))+(((-1.0)*r01*x613))+(((0.0009)*x603))+(((0.1158)*x602))+(((-1.0)*px))+((r02*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x614=((1.0)*sj5);
IkReal x615=((1.0)*cj5);
CheckValue<IkReal> x616=IKPowWithIntegerCheck(sj3,-1);
if(!x616.valid){
continue;
}
CheckValue<IkReal> x617=IKPowWithIntegerCheck(cj3,-1);
if(!x617.valid){
continue;
}
if( IKabs(((x616.value)*(((((-1.0)*r20*sj6*x615))+(((-1.0)*r22*x614))+(((-1.0)*cj6*r21*x615)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x617.value)*((((cj6*r00*sj4))+(((-1.0)*cj4*cj6*r01*x614))+((cj4*cj5*r02))+(((-1.0)*r01*sj4*sj6))+(((-1.0)*cj4*r00*sj6*x614)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x616.value)*(((((-1.0)*r20*sj6*x615))+(((-1.0)*r22*x614))+(((-1.0)*cj6*r21*x615))))))+IKsqr(((x617.value)*((((cj6*r00*sj4))+(((-1.0)*cj4*cj6*r01*x614))+((cj4*cj5*r02))+(((-1.0)*r01*sj4*sj6))+(((-1.0)*cj4*r00*sj6*x614))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x616.value)*(((((-1.0)*r20*sj6*x615))+(((-1.0)*r22*x614))+(((-1.0)*cj6*r21*x615))))), ((x617.value)*((((cj6*r00*sj4))+(((-1.0)*cj4*cj6*r01*x614))+((cj4*cj5*r02))+(((-1.0)*r01*sj4*sj6))+(((-1.0)*cj4*r00*sj6*x614))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x618=IKcos(j2);
IkReal x619=IKsin(j2);
IkReal x620=(cj5*cj6);
IkReal x621=(sj5*sj6);
IkReal x622=(cj4*r20);
IkReal x623=(cj5*r22);
IkReal x624=(cj5*sj6);
IkReal x625=((1.0)*cj6);
IkReal x626=(sj4*sj5);
IkReal x627=((1.0)*cj4);
IkReal x628=(cj6*sj5);
IkReal x629=(cj5*r02);
IkReal x630=(cj4*r21);
IkReal x631=((1.0)*sj4);
IkReal x632=(sj4*sj6);
IkReal x633=(cj4*r01);
IkReal x634=(cj3*x618);
IkReal x635=(r00*x625);
IkReal x636=(cj3*x619);
evalcond[0]=(((r21*x620))+((r22*sj5))+((sj3*x619))+((r20*x624)));
evalcond[1]=((((-1.0)*sj3*x618))+((r02*sj5))+((r01*x620))+((r00*x624)));
evalcond[2]=(((sj4*x623))+(((-1.0)*r21*x625*x626))+(((-1.0)*x622*x625))+(((-1.0)*r20*x621*x631))+((sj6*x630))+x618);
evalcond[3]=(((sj4*x629))+(((-1.0)*r00*x621*x631))+(((-1.0)*cj4*x635))+((sj6*x633))+x619+(((-1.0)*r01*x625*x626)));
evalcond[4]=((((-1.0)*sj4*x635))+((x628*x633))+((cj4*r00*x621))+((r01*x632))+(((-1.0)*x627*x629))+x634);
evalcond[5]=(((r21*x632))+((x628*x630))+(((-1.0)*x623*x627))+(((-1.0)*r20*sj4*x625))+((x621*x622))+(((-1.0)*x636)));
evalcond[6]=((-0.0215)+(((0.0009)*x618))+(((0.0718)*x623))+(((-1.0)*pz))+(((-0.0718)*r20*x621))+(((-0.1158)*x619))+(((-0.09746)*x636))+(((-0.0718)*r21*x628)));
evalcond[7]=((0.1255)+(((0.1158)*x618))+(((-0.0718)*r01*x628))+(((0.0009)*x619))+(((0.0718)*x629))+(((-1.0)*px))+(((-0.0718)*r00*x621))+(((0.09746)*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x637=(sj4*sj5);
IkReal x638=(cj6*r01);
IkReal x639=(r00*sj6);
CheckValue<IkReal> x640=IKPowWithIntegerCheck(sj3,-1);
if(!x640.valid){
continue;
}
if( IKabs(((((-1.0)*cj5*r02*sj4))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*sj6))+((x637*x639))+((x637*x638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x640.value)*((((cj5*x638))+((cj5*x639))+((r02*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r02*sj4))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*sj6))+((x637*x639))+((x637*x638))))+IKsqr(((x640.value)*((((cj5*x638))+((cj5*x639))+((r02*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj5*r02*sj4))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*sj6))+((x637*x639))+((x637*x638))), ((x640.value)*((((cj5*x638))+((cj5*x639))+((r02*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x641=IKcos(j2);
IkReal x642=IKsin(j2);
IkReal x643=(cj5*cj6);
IkReal x644=(sj5*sj6);
IkReal x645=(cj4*r20);
IkReal x646=(cj5*r22);
IkReal x647=(cj5*sj6);
IkReal x648=((1.0)*cj6);
IkReal x649=(sj4*sj5);
IkReal x650=((1.0)*cj4);
IkReal x651=(cj6*sj5);
IkReal x652=(cj5*r02);
IkReal x653=(cj4*r21);
IkReal x654=((1.0)*sj4);
IkReal x655=(sj4*sj6);
IkReal x656=(cj4*r01);
IkReal x657=(cj3*x641);
IkReal x658=(r00*x648);
IkReal x659=(cj3*x642);
evalcond[0]=(((r20*x647))+((r22*sj5))+((r21*x643))+((sj3*x642)));
evalcond[1]=((((-1.0)*sj3*x641))+((r02*sj5))+((r01*x643))+((r00*x647)));
evalcond[2]=((((-1.0)*r21*x648*x649))+((sj4*x646))+((sj6*x653))+x641+(((-1.0)*x645*x648))+(((-1.0)*r20*x644*x654)));
evalcond[3]=(((sj4*x652))+(((-1.0)*r00*x644*x654))+(((-1.0)*r01*x648*x649))+((sj6*x656))+x642+(((-1.0)*cj4*x658)));
evalcond[4]=(((cj4*r00*x644))+(((-1.0)*sj4*x658))+((x651*x656))+x657+(((-1.0)*x650*x652))+((r01*x655)));
evalcond[5]=(((x644*x645))+(((-1.0)*x659))+(((-1.0)*r20*sj4*x648))+(((-1.0)*x646*x650))+((x651*x653))+((r21*x655)));
evalcond[6]=((-0.0215)+(((-0.1158)*x642))+(((0.0718)*x646))+(((-0.09746)*x659))+(((-0.0718)*r21*x651))+(((-1.0)*pz))+(((0.0009)*x641))+(((-0.0718)*r20*x644)));
evalcond[7]=((0.1255)+(((-0.0718)*r00*x644))+(((-0.0718)*r01*x651))+(((0.0718)*x652))+(((-1.0)*px))+(((0.1158)*x641))+(((0.0009)*x642))+(((0.09746)*x657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x660=((1.0)*cj5);
CheckValue<IkReal> x661=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x661.valid){
continue;
}
CheckValue<IkReal> x662 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x660))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x660)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x662.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x661.value)))+(x662.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x663=IKcos(j2);
IkReal x664=IKsin(j2);
IkReal x665=(cj5*cj6);
IkReal x666=(sj5*sj6);
IkReal x667=(cj4*r20);
IkReal x668=(cj5*r22);
IkReal x669=(cj5*sj6);
IkReal x670=((1.0)*cj6);
IkReal x671=(sj4*sj5);
IkReal x672=((1.0)*cj4);
IkReal x673=(cj6*sj5);
IkReal x674=(cj5*r02);
IkReal x675=(cj4*r21);
IkReal x676=((1.0)*sj4);
IkReal x677=(sj4*sj6);
IkReal x678=(cj4*r01);
IkReal x679=(cj3*x663);
IkReal x680=(r00*x670);
IkReal x681=(cj3*x664);
evalcond[0]=(((r20*x669))+((r22*sj5))+((r21*x665))+((sj3*x664)));
evalcond[1]=(((r01*x665))+((r00*x669))+(((-1.0)*sj3*x663))+((r02*sj5)));
evalcond[2]=(((sj4*x668))+(((-1.0)*r21*x670*x671))+(((-1.0)*x667*x670))+(((-1.0)*r20*x666*x676))+x663+((sj6*x675)));
evalcond[3]=((((-1.0)*cj4*x680))+x664+((sj4*x674))+(((-1.0)*r01*x670*x671))+((sj6*x678))+(((-1.0)*r00*x666*x676)));
evalcond[4]=(((x673*x678))+((r01*x677))+((cj4*r00*x666))+x679+(((-1.0)*x672*x674))+(((-1.0)*sj4*x680)));
evalcond[5]=(((x673*x675))+((r21*x677))+((x666*x667))+(((-1.0)*x668*x672))+(((-1.0)*r20*sj4*x670))+(((-1.0)*x681)));
evalcond[6]=((-0.0215)+(((-0.09746)*x681))+(((0.0009)*x663))+(((-1.0)*pz))+(((-0.0718)*r20*x666))+(((-0.1158)*x664))+(((-0.0718)*r21*x673))+(((0.0718)*x668)));
evalcond[7]=((0.1255)+(((0.1158)*x663))+(((-0.0718)*r00*x666))+(((0.09746)*x679))+(((0.0009)*x664))+(((-1.0)*px))+(((0.0718)*x674))+(((-0.0718)*r01*x673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x682=((0.736712497434845)*sj5);
IkReal x683=(r00*sj6);
IkReal x684=(cj6*r01);
IkReal x685=((1.0)*cj5);
if( IKabs(((0.00102606197414324)+(((-0.736712497434845)*cj5*r02))+((x682*x683))+((x682*x684))+(((10.2606197414324)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*sj5))+(((-1.0)*x684*x685))+(((-1.0)*x683*x685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00102606197414324)+(((-0.736712497434845)*cj5*r02))+((x682*x683))+((x682*x684))+(((10.2606197414324)*px))))+IKsqr(((((-1.0)*r02*sj5))+(((-1.0)*x684*x685))+(((-1.0)*x683*x685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00102606197414324)+(((-0.736712497434845)*cj5*r02))+((x682*x683))+((x682*x684))+(((10.2606197414324)*px))), ((((-1.0)*r02*sj5))+(((-1.0)*x684*x685))+(((-1.0)*x683*x685))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x686=IKsin(j3);
IkReal x687=(cj6*r01);
IkReal x688=(cj5*r02);
IkReal x689=(r00*sj5*sj6);
evalcond[0]=(((cj5*r00*sj6))+((cj5*x687))+((r02*sj5))+(IKcos(j3)));
evalcond[1]=((-0.0001)+(((-0.0718)*sj5*x687))+(((0.0718)*x688))+(((-1.0)*px))+(((0.09746)*x686))+(((-0.0718)*x689)));
evalcond[2]=(((cj4*x689))+((cj4*sj5*x687))+((r01*sj4*sj6))+x686+(((-1.0)*cj4*x688))+(((-1.0)*cj6*r00*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x690=((1.0)*cj5);
IkReal x691=((1.0)*sj5);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*r12*x691))+(((-1.0)*r10*sj6*x690))+(((-1.0)*cj6*r11*x690)))))+(IKabs(((((-1.0)*r20*sj6*x690))+(((-1.0)*cj6*r21*x690))+(((-1.0)*r22*x691))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x692=(cj5*r22);
IkReal x693=((0.00422020069398856)*sj4);
IkReal x694=(r20*sj5*sj6);
IkReal x695=(cj4*cj6*r20);
IkReal x696=(cj4*r21*sj6);
IkReal x697=(cj6*r21*sj5);
if( IKabs(((-0.100815905467504)+(((0.00422020069398856)*x695))+(((-4.68911188220951)*pz))+((x693*x697))+((x693*x694))+(((-1.0)*x692*x693))+(((0.336678233142643)*x692))+(((-0.00422020069398856)*x696))+(((-0.336678233142643)*x697))+(((-0.336678233142643)*x694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x697))+((sj4*x694))+x695+(((-1.0)*sj4*x692))+(((-1.0)*x696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.100815905467504)+(((0.00422020069398856)*x695))+(((-4.68911188220951)*pz))+((x693*x697))+((x693*x694))+(((-1.0)*x692*x693))+(((0.336678233142643)*x692))+(((-0.00422020069398856)*x696))+(((-0.336678233142643)*x697))+(((-0.336678233142643)*x694))))+IKsqr((((sj4*x697))+((sj4*x694))+x695+(((-1.0)*sj4*x692))+(((-1.0)*x696))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.100815905467504)+(((0.00422020069398856)*x695))+(((-4.68911188220951)*pz))+((x693*x697))+((x693*x694))+(((-1.0)*x692*x693))+(((0.336678233142643)*x692))+(((-0.00422020069398856)*x696))+(((-0.336678233142643)*x697))+(((-0.336678233142643)*x694))), (((sj4*x697))+((sj4*x694))+x695+(((-1.0)*sj4*x692))+(((-1.0)*x696))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x698=IKcos(j2);
IkReal x699=IKsin(j2);
IkReal x700=(cj4*cj6);
IkReal x701=(r11*sj5);
IkReal x702=(cj5*r12);
IkReal x703=((1.0)*r10);
IkReal x704=((1.0)*cj4);
IkReal x705=(cj5*r22);
IkReal x706=(sj5*sj6);
IkReal x707=((1.0)*r20);
IkReal x708=(cj4*sj6);
IkReal x709=(r21*sj5);
IkReal x710=((0.0718)*cj6);
IkReal x711=(sj4*sj6);
IkReal x712=((1.0)*x699);
IkReal x713=((1.0)*cj6*sj4);
IkReal x714=(cj4*x706);
evalcond[0]=((-0.0215)+(((-0.0718)*r20*x706))+(((-1.0)*x709*x710))+(((-1.0)*pz))+(((-0.21326)*x699))+(((0.0718)*x705))+(((0.0009)*x698)));
evalcond[1]=((((-1.0)*x709*x713))+((r21*x708))+x698+(((-1.0)*sj4*x706*x707))+(((-1.0)*x700*x707))+((sj4*x705)));
evalcond[2]=((-0.1255)+(((-1.0)*py))+(((-0.21326)*x698))+(((0.0718)*x702))+(((-0.0718)*r10*x706))+(((-1.0)*x701*x710))+(((-0.0009)*x699)));
evalcond[3]=(((x700*x709))+((r20*x714))+(((-1.0)*x712))+(((-1.0)*x704*x705))+((r21*x711))+(((-1.0)*cj6*sj4*x707)));
evalcond[4]=(((r11*x711))+(((-1.0)*x702*x704))+((x700*x701))+(((-1.0)*cj6*sj4*x703))+((r10*x714))+(((-1.0)*x698)));
evalcond[5]=((((-1.0)*sj4*x703*x706))+(((-1.0)*x712))+(((-1.0)*x701*x713))+(((-1.0)*x700*x703))+((r11*x708))+((sj4*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x715=((0.191656562828474)*sj5);
IkReal x716=(r10*sj6);
IkReal x717=(cj5*r12);
IkReal x718=(cj6*r21);
IkReal x719=(cj5*r22);
IkReal x720=((3.90553484697134)*sj5);
IkReal x721=(r20*sj6);
IkReal x722=(cj6*r11);
if( IKabs(((-1.50448325689216)+(((3.90553484697134)*x719))+(((-2.6693114600066)*py))+(((-1.0)*x720*x721))+(((0.191656562828474)*x717))+(((-1.0)*x715*x722))+(((-1.0)*x718*x720))+(((-54.39463575169)*pz))+(((-1.0)*x715*x716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.76913659044695)+((x715*x718))+(((2.6693114600066)*pz))+(((3.90553484697134)*x717))+(((-1.0)*x716*x720))+(((-1.0)*x720*x722))+(((-0.191656562828474)*x719))+(((-54.39463575169)*py))+((x715*x721)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.50448325689216)+(((3.90553484697134)*x719))+(((-2.6693114600066)*py))+(((-1.0)*x720*x721))+(((0.191656562828474)*x717))+(((-1.0)*x715*x722))+(((-1.0)*x718*x720))+(((-54.39463575169)*pz))+(((-1.0)*x715*x716))))+IKsqr(((-6.76913659044695)+((x715*x718))+(((2.6693114600066)*pz))+(((3.90553484697134)*x717))+(((-1.0)*x716*x720))+(((-1.0)*x720*x722))+(((-0.191656562828474)*x719))+(((-54.39463575169)*py))+((x715*x721))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.50448325689216)+(((3.90553484697134)*x719))+(((-2.6693114600066)*py))+(((-1.0)*x720*x721))+(((0.191656562828474)*x717))+(((-1.0)*x715*x722))+(((-1.0)*x718*x720))+(((-54.39463575169)*pz))+(((-1.0)*x715*x716))), ((-6.76913659044695)+((x715*x718))+(((2.6693114600066)*pz))+(((3.90553484697134)*x717))+(((-1.0)*x716*x720))+(((-1.0)*x720*x722))+(((-0.191656562828474)*x719))+(((-54.39463575169)*py))+((x715*x721))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x723=IKcos(j2);
IkReal x724=IKsin(j2);
IkReal x725=(cj5*r12);
IkReal x726=((1.0)*cj4);
IkReal x727=(cj6*r10);
IkReal x728=(cj6*r11);
IkReal x729=(cj5*r22);
IkReal x730=(r10*sj6);
IkReal x731=(cj6*r20);
IkReal x732=(cj4*sj5);
IkReal x733=(r11*sj6);
IkReal x734=(cj6*r21);
IkReal x735=((0.0718)*sj5);
IkReal x736=(r20*sj6);
IkReal x737=((1.0)*sj4);
IkReal x738=(r21*sj6);
IkReal x739=(sj5*x737);
IkReal x740=(sj6*x732);
evalcond[0]=((((-1.0)*x731*x737))+(((-1.0)*x726*x729))+x724+((sj4*x738))+((x732*x734))+((x732*x736)));
evalcond[1]=((((-1.0)*x727*x737))+((x728*x732))+(((-1.0)*x725*x726))+x723+((sj4*x733))+((x730*x732)));
evalcond[2]=((-0.0215)+(((-1.0)*x735*x736))+(((-0.01834)*x724))+(((-1.0)*x734*x735))+(((-1.0)*pz))+(((0.0718)*x729))+(((0.0009)*x723)));
evalcond[3]=(((cj4*x738))+(((-1.0)*x736*x739))+(((-1.0)*x734*x739))+x723+(((-1.0)*x726*x731))+((sj4*x729)));
evalcond[4]=((-0.1255)+(((-0.01834)*x723))+(((-1.0)*py))+(((0.0718)*x725))+(((-1.0)*x730*x735))+(((-1.0)*x728*x735))+(((-0.0009)*x724)));
evalcond[5]=(((cj4*x733))+(((-1.0)*x724))+(((-1.0)*x730*x739))+(((-1.0)*x726*x727))+((sj4*x725))+(((-1.0)*x728*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x741=((1.0)*cj5);
IkReal x742=((1.0)*sj5);
if( IKabs(((((-1.0)*r22*x742))+(((-1.0)*r20*sj6*x741))+(((-1.0)*cj6*r21*x741)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x742))+(((-1.0)*cj6*r11*x741))+(((-1.0)*r10*sj6*x741)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x742))+(((-1.0)*r20*sj6*x741))+(((-1.0)*cj6*r21*x741))))+IKsqr(((((-1.0)*r12*x742))+(((-1.0)*cj6*r11*x741))+(((-1.0)*r10*sj6*x741))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x742))+(((-1.0)*r20*sj6*x741))+(((-1.0)*cj6*r21*x741))), ((((-1.0)*r12*x742))+(((-1.0)*cj6*r11*x741))+(((-1.0)*r10*sj6*x741))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x743=IKcos(j2);
IkReal x744=IKsin(j2);
IkReal x745=(cj5*cj6);
IkReal x746=(cj5*r12);
IkReal x747=(r10*sj6);
IkReal x748=(cj5*r22);
IkReal x749=(r20*sj6);
IkReal x750=(cj4*sj6);
IkReal x751=((0.0718)*sj5);
IkReal x752=((1.0)*cj4*cj6);
IkReal x753=((1.0)*sj4*sj5);
IkReal x754=(cj6*x753);
evalcond[0]=(((r22*sj5))+((r21*x745))+x744+((cj5*x749)));
evalcond[1]=(((r11*x745))+((r12*sj5))+x743+((cj5*x747)));
evalcond[2]=((-0.0215)+(((-0.1158)*x744))+(((0.0718)*x748))+(((-1.0)*pz))+(((0.0009)*x743))+(((-1.0)*x749*x751))+(((-1.0)*cj6*r21*x751)));
evalcond[3]=(((sj4*x748))+((r21*x750))+x743+(((-1.0)*x749*x753))+(((-1.0)*r21*x754))+(((-1.0)*r20*x752)));
evalcond[4]=((-0.1255)+(((-0.1158)*x743))+(((0.0718)*x746))+(((-1.0)*py))+(((-0.0009)*x744))+(((-1.0)*x747*x751))+(((-1.0)*cj6*r11*x751)));
evalcond[5]=(((sj4*x746))+(((-1.0)*r10*x752))+(((-1.0)*r11*x754))+(((-1.0)*x747*x753))+(((-1.0)*x744))+((r11*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x755=(cj5*cj6);
IkReal x756=(cj5*sj6);
if( IKabs((((r22*sj5))+((r21*x755))+((r20*x756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x756))+((r12*sj5))+((r11*x755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj5))+((r21*x755))+((r20*x756))))+IKsqr((((r10*x756))+((r12*sj5))+((r11*x755))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*sj5))+((r21*x755))+((r20*x756))), (((r10*x756))+((r12*sj5))+((r11*x755))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x757=IKcos(j2);
IkReal x758=IKsin(j2);
IkReal x759=(cj5*cj6);
IkReal x760=(cj5*r12);
IkReal x761=(r10*sj6);
IkReal x762=(cj5*r22);
IkReal x763=(r20*sj6);
IkReal x764=(cj4*sj6);
IkReal x765=((0.0718)*sj5);
IkReal x766=((1.0)*x758);
IkReal x767=((1.0)*cj4*cj6);
IkReal x768=((1.0)*sj4*sj5);
IkReal x769=(cj6*x768);
evalcond[0]=(((r22*sj5))+(((-1.0)*x766))+((r21*x759))+((cj5*x763)));
evalcond[1]=(((cj5*x761))+((r12*sj5))+(((-1.0)*x757))+((r11*x759)));
evalcond[2]=((-0.0215)+(((-1.0)*x763*x765))+(((-0.1158)*x758))+(((-1.0)*pz))+(((-1.0)*cj6*r21*x765))+(((0.0009)*x757))+(((0.0718)*x762)));
evalcond[3]=((((-1.0)*x763*x768))+(((-1.0)*r20*x767))+((r21*x764))+(((-1.0)*r21*x769))+((sj4*x762))+x757);
evalcond[4]=((-0.1255)+(((-1.0)*cj6*r11*x765))+(((-0.1158)*x757))+(((-1.0)*py))+(((0.0718)*x760))+(((-0.0009)*x758))+(((-1.0)*x761*x765)));
evalcond[5]=((((-1.0)*x766))+(((-1.0)*r10*x767))+((sj4*x760))+(((-1.0)*r11*x769))+((r11*x764))+(((-1.0)*x761*x768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x770=(cj4*sj5);
IkReal x771=((1.0)*cj6);
IkReal x772=((1.0)*cj5);
CheckValue<IkReal> x773=IKPowWithIntegerCheck(sj3,-1);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774=IKPowWithIntegerCheck(cj3,-1);
if(!x774.valid){
continue;
}
if( IKabs(((x773.value)*(((((-1.0)*r20*sj6*x772))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*r21*x771)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x774.value)*((((cj6*r11*x770))+((r11*sj4*sj6))+((r10*sj6*x770))+(((-1.0)*cj4*r12*x772))+(((-1.0)*r10*sj4*x771)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x773.value)*(((((-1.0)*r20*sj6*x772))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*r21*x771))))))+IKsqr(((x774.value)*((((cj6*r11*x770))+((r11*sj4*sj6))+((r10*sj6*x770))+(((-1.0)*cj4*r12*x772))+(((-1.0)*r10*sj4*x771))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x773.value)*(((((-1.0)*r20*sj6*x772))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*r21*x771))))), ((x774.value)*((((cj6*r11*x770))+((r11*sj4*sj6))+((r10*sj6*x770))+(((-1.0)*cj4*r12*x772))+(((-1.0)*r10*sj4*x771))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x775=IKcos(j2);
IkReal x776=IKsin(j2);
IkReal x777=(cj5*cj6);
IkReal x778=(cj5*r12);
IkReal x779=((1.0)*cj4);
IkReal x780=(cj6*r10);
IkReal x781=(r10*sj6);
IkReal x782=(cj4*sj5);
IkReal x783=(cj6*r21);
IkReal x784=(r20*sj6);
IkReal x785=(cj5*r22);
IkReal x786=(cj6*r20);
IkReal x787=(cj6*r11);
IkReal x788=(r11*sj6);
IkReal x789=((0.0718)*sj5);
IkReal x790=((1.0)*sj4);
IkReal x791=(r21*sj6);
IkReal x792=(cj3*x775);
IkReal x793=(sj5*x790);
IkReal x794=(cj3*x776);
evalcond[0]=(((r22*sj5))+((cj5*x784))+((r21*x777))+((sj3*x776)));
evalcond[1]=(((cj5*x781))+((r11*x777))+((r12*sj5))+((sj3*x775)));
evalcond[2]=((((-1.0)*x783*x793))+((sj4*x785))+((cj4*x791))+(((-1.0)*x784*x793))+x775+(((-1.0)*x779*x786)));
evalcond[3]=(((x782*x783))+((x782*x784))+((sj4*x791))+(((-1.0)*x786*x790))+(((-1.0)*x794))+(((-1.0)*x779*x785)));
evalcond[4]=(((sj4*x778))+(((-1.0)*x781*x793))+((cj4*x788))+(((-1.0)*x787*x793))+(((-1.0)*x776))+(((-1.0)*x779*x780)));
evalcond[5]=(((x781*x782))+(((-1.0)*x778*x779))+((x782*x787))+((sj4*x788))+(((-1.0)*x792))+(((-1.0)*x780*x790)));
evalcond[6]=((-0.0215)+(((-0.09746)*x794))+(((-0.1158)*x776))+(((-1.0)*pz))+(((0.0718)*x785))+(((0.0009)*x775))+(((-1.0)*x784*x789))+(((-1.0)*x783*x789)));
evalcond[7]=((-0.1255)+(((-0.09746)*x792))+(((0.0718)*x778))+(((-0.1158)*x775))+(((-1.0)*x781*x789))+(((-1.0)*py))+(((-1.0)*x787*x789))+(((-0.0009)*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x795=(r20*sj6);
IkReal x796=(sj4*sj5);
IkReal x797=((1.0)*r22);
IkReal x798=((1.0)*r21);
CheckValue<IkReal> x799=IKPowWithIntegerCheck(sj3,-1);
if(!x799.valid){
continue;
}
if( IKabs(((x799.value)*(((((-1.0)*sj5*x797))+(((-1.0)*cj5*cj6*x798))+(((-1.0)*cj5*x795)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*sj6*x798))+((cj6*r21*x796))+((cj4*cj6*r20))+(((-1.0)*cj5*sj4*x797))+((x795*x796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x799.value)*(((((-1.0)*sj5*x797))+(((-1.0)*cj5*cj6*x798))+(((-1.0)*cj5*x795))))))+IKsqr(((((-1.0)*cj4*sj6*x798))+((cj6*r21*x796))+((cj4*cj6*r20))+(((-1.0)*cj5*sj4*x797))+((x795*x796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x799.value)*(((((-1.0)*sj5*x797))+(((-1.0)*cj5*cj6*x798))+(((-1.0)*cj5*x795))))), ((((-1.0)*cj4*sj6*x798))+((cj6*r21*x796))+((cj4*cj6*r20))+(((-1.0)*cj5*sj4*x797))+((x795*x796))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x800=IKcos(j2);
IkReal x801=IKsin(j2);
IkReal x802=(cj5*cj6);
IkReal x803=(cj5*r12);
IkReal x804=((1.0)*cj4);
IkReal x805=(cj6*r10);
IkReal x806=(r10*sj6);
IkReal x807=(cj4*sj5);
IkReal x808=(cj6*r21);
IkReal x809=(r20*sj6);
IkReal x810=(cj5*r22);
IkReal x811=(cj6*r20);
IkReal x812=(cj6*r11);
IkReal x813=(r11*sj6);
IkReal x814=((0.0718)*sj5);
IkReal x815=((1.0)*sj4);
IkReal x816=(r21*sj6);
IkReal x817=(cj3*x800);
IkReal x818=(sj5*x815);
IkReal x819=(cj3*x801);
evalcond[0]=(((sj3*x801))+((cj5*x809))+((r21*x802))+((r22*sj5)));
evalcond[1]=(((sj3*x800))+((cj5*x806))+((r11*x802))+((r12*sj5)));
evalcond[2]=(((sj4*x810))+(((-1.0)*x808*x818))+(((-1.0)*x809*x818))+((cj4*x816))+(((-1.0)*x804*x811))+x800);
evalcond[3]=(((sj4*x816))+(((-1.0)*x811*x815))+(((-1.0)*x819))+(((-1.0)*x804*x810))+((x807*x808))+((x807*x809)));
evalcond[4]=((((-1.0)*x812*x818))+(((-1.0)*x801))+(((-1.0)*x804*x805))+((cj4*x813))+((sj4*x803))+(((-1.0)*x806*x818)));
evalcond[5]=(((sj4*x813))+((x806*x807))+(((-1.0)*x817))+((x807*x812))+(((-1.0)*x803*x804))+(((-1.0)*x805*x815)));
evalcond[6]=((-0.0215)+(((-1.0)*x808*x814))+(((-1.0)*x809*x814))+(((-0.09746)*x819))+(((-1.0)*pz))+(((0.0009)*x800))+(((0.0718)*x810))+(((-0.1158)*x801)));
evalcond[7]=((-0.1255)+(((-1.0)*x812*x814))+(((-0.0009)*x801))+(((0.0718)*x803))+(((-0.09746)*x817))+(((-1.0)*py))+(((-0.1158)*x800))+(((-1.0)*x806*x814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x820=((1.0)*cj5);
IkReal x821=((1.0)*sj5);
CheckValue<IkReal> x822=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x821))+(((-1.0)*cj6*r21*x820))+(((-1.0)*r20*sj6*x820)))),IkReal(((((-1.0)*r12*x821))+(((-1.0)*r10*sj6*x820))+(((-1.0)*cj6*r11*x820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x823.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x822.value)))+(x823.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x824=IKcos(j2);
IkReal x825=IKsin(j2);
IkReal x826=(cj5*cj6);
IkReal x827=(cj5*r12);
IkReal x828=((1.0)*cj4);
IkReal x829=(cj6*r10);
IkReal x830=(r10*sj6);
IkReal x831=(cj4*sj5);
IkReal x832=(cj6*r21);
IkReal x833=(r20*sj6);
IkReal x834=(cj5*r22);
IkReal x835=(cj6*r20);
IkReal x836=(cj6*r11);
IkReal x837=(r11*sj6);
IkReal x838=((0.0718)*sj5);
IkReal x839=((1.0)*sj4);
IkReal x840=(r21*sj6);
IkReal x841=(cj3*x824);
IkReal x842=(sj5*x839);
IkReal x843=(cj3*x825);
evalcond[0]=(((r21*x826))+((r22*sj5))+((sj3*x825))+((cj5*x833)));
evalcond[1]=(((sj3*x824))+((cj5*x830))+((r12*sj5))+((r11*x826)));
evalcond[2]=((((-1.0)*x828*x835))+((sj4*x834))+(((-1.0)*x833*x842))+((cj4*x840))+x824+(((-1.0)*x832*x842)));
evalcond[3]=(((x831*x832))+((x831*x833))+(((-1.0)*x828*x834))+(((-1.0)*x835*x839))+((sj4*x840))+(((-1.0)*x843)));
evalcond[4]=((((-1.0)*x828*x829))+(((-1.0)*x836*x842))+(((-1.0)*x830*x842))+((cj4*x837))+(((-1.0)*x825))+((sj4*x827)));
evalcond[5]=(((x831*x836))+((sj4*x837))+(((-1.0)*x827*x828))+((x830*x831))+(((-1.0)*x841))+(((-1.0)*x829*x839)));
evalcond[6]=((-0.0215)+(((-1.0)*x832*x838))+(((-0.1158)*x825))+(((0.0009)*x824))+(((-1.0)*x833*x838))+(((-1.0)*pz))+(((0.0718)*x834))+(((-0.09746)*x843)));
evalcond[7]=((-0.1255)+(((-0.1158)*x824))+(((-1.0)*x836*x838))+(((-0.0009)*x825))+(((-1.0)*x830*x838))+(((-1.0)*py))+(((0.0718)*x827))+(((-0.09746)*x841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x844=(r00*sj6);
IkReal x845=((0.736712497434845)*sj5);
IkReal x846=(cj6*r01);
if( IKabs(((0.00102606197414324)+(((0.736712497434845)*cj5*r02))+(((-10.2606197414324)*px))+(((-1.0)*x844*x845))+(((-1.0)*x845*x846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*x846))+((cj5*x844))+((r02*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00102606197414324)+(((0.736712497434845)*cj5*r02))+(((-10.2606197414324)*px))+(((-1.0)*x844*x845))+(((-1.0)*x845*x846))))+IKsqr((((cj5*x846))+((cj5*x844))+((r02*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00102606197414324)+(((0.736712497434845)*cj5*r02))+(((-10.2606197414324)*px))+(((-1.0)*x844*x845))+(((-1.0)*x845*x846))), (((cj5*x846))+((cj5*x844))+((r02*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x847=IKsin(j3);
IkReal x848=(cj6*r01);
IkReal x849=(cj5*r02);
IkReal x850=(r00*sj5*sj6);
evalcond[0]=(((cj5*r00*sj6))+((cj5*x848))+((r02*sj5))+(((-1.0)*(IKcos(j3)))));
evalcond[1]=((0.0001)+(((-1.0)*px))+(((0.0718)*x849))+(((-0.0718)*x850))+(((-0.0718)*sj5*x848))+(((-0.09746)*x847)));
evalcond[2]=(((cj4*sj5*x848))+(((-1.0)*cj4*x849))+((r01*sj4*sj6))+(((-1.0)*x847))+((cj4*x850))+(((-1.0)*cj6*r00*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x851=(cj5*cj6);
IkReal x852=(cj5*sj6);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*r21*x851))+(((-1.0)*r20*x852))+(((-1.0)*r22*sj5)))))+(IKabs((((r10*x852))+((r11*x851))+((r12*sj5))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x853=((0.0014208244081433)*cj5);
IkReal x854=((0.33667223697849)*cj5);
IkReal x855=((0.0014208244081433)*cj6*sj5);
IkReal x856=(r10*sj5*sj6);
IkReal x857=(r20*sj5*sj6);
IkReal x858=((0.33667223697849)*cj6*sj5);
if( IKabs(((-0.103297584376873)+(((-4.68902837017395)*pz))+(((-1.0)*r12*x853))+(((0.0014208244081433)*x856))+(((-0.33667223697849)*x857))+((r11*x855))+((r22*x854))+(((-1.0)*r21*x858))+(((0.0197886407819401)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.588047604680019)+(((-1.0)*r22*x853))+((r21*x855))+(((-1.0)*r12*x854))+(((0.33667223697849)*x856))+(((0.0014208244081433)*x857))+((r11*x858))+(((0.0197886407819401)*pz))+(((4.68902837017395)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.103297584376873)+(((-4.68902837017395)*pz))+(((-1.0)*r12*x853))+(((0.0014208244081433)*x856))+(((-0.33667223697849)*x857))+((r11*x855))+((r22*x854))+(((-1.0)*r21*x858))+(((0.0197886407819401)*py))))+IKsqr(((-0.588047604680019)+(((-1.0)*r22*x853))+((r21*x855))+(((-1.0)*r12*x854))+(((0.33667223697849)*x856))+(((0.0014208244081433)*x857))+((r11*x858))+(((0.0197886407819401)*pz))+(((4.68902837017395)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.103297584376873)+(((-4.68902837017395)*pz))+(((-1.0)*r12*x853))+(((0.0014208244081433)*x856))+(((-0.33667223697849)*x857))+((r11*x855))+((r22*x854))+(((-1.0)*r21*x858))+(((0.0197886407819401)*py))), ((-0.588047604680019)+(((-1.0)*r22*x853))+((r21*x855))+(((-1.0)*r12*x854))+(((0.33667223697849)*x856))+(((0.0014208244081433)*x857))+((r11*x858))+(((0.0197886407819401)*pz))+(((4.68902837017395)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x859=IKcos(j2);
IkReal x860=IKsin(j2);
IkReal x861=(cj5*r12);
IkReal x862=((1.0)*cj4);
IkReal x863=(cj6*r11);
IkReal x864=(cj6*r10);
IkReal x865=(cj5*r22);
IkReal x866=(r10*sj6);
IkReal x867=(cj6*r20);
IkReal x868=(cj4*sj5);
IkReal x869=(cj4*sj6);
IkReal x870=(cj6*r21);
IkReal x871=((0.0718)*sj5);
IkReal x872=(r20*sj6);
IkReal x873=((1.0)*sj4);
IkReal x874=(sj4*sj6);
IkReal x875=(sj6*x868);
IkReal x876=(sj5*x873);
evalcond[0]=(((r11*x874))+((x863*x868))+(((-1.0)*x861*x862))+((x866*x868))+(((-1.0)*x864*x873))+x859);
evalcond[1]=((-0.0215)+(((0.0718)*x865))+(((-1.0)*x871*x872))+(((-0.21326)*x860))+(((0.0009)*x859))+(((-1.0)*pz))+(((-1.0)*x870*x871)));
evalcond[2]=((((-1.0)*x872*x876))+((r21*x869))+(((-1.0)*x862*x867))+((sj4*x865))+(((-1.0)*x870*x876))+x859);
evalcond[3]=(((r11*x869))+(((-1.0)*x866*x876))+(((-1.0)*x862*x864))+((sj4*x861))+x860+(((-1.0)*x863*x876)));
evalcond[4]=((0.1255)+(((0.0718)*x861))+(((-1.0)*x866*x871))+(((0.0009)*x860))+(((-1.0)*py))+(((0.21326)*x859))+(((-1.0)*x863*x871)));
evalcond[5]=(((x868*x872))+((x868*x870))+((r21*x874))+(((-1.0)*x860))+(((-1.0)*x862*x865))+(((-1.0)*x867*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x877=((0.191656562828474)*sj5);
IkReal x878=(r10*sj6);
IkReal x879=(cj5*r12);
IkReal x880=(cj6*r21);
IkReal x881=(cj5*r22);
IkReal x882=((3.90553484697134)*sj5);
IkReal x883=(r20*sj6);
IkReal x884=(cj6*r11);
if( IKabs(((-1.50448325689216)+(((-1.0)*x882*x883))+(((2.6693114600066)*py))+((x877*x884))+(((3.90553484697134)*x881))+(((-0.191656562828474)*x879))+(((-54.39463575169)*pz))+(((-1.0)*x880*x882))+((x877*x878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-6.76913659044695)+(((2.6693114600066)*pz))+(((-0.191656562828474)*x881))+((x877*x880))+((x877*x883))+((x882*x884))+((x878*x882))+(((-3.90553484697134)*x879))+(((54.39463575169)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.50448325689216)+(((-1.0)*x882*x883))+(((2.6693114600066)*py))+((x877*x884))+(((3.90553484697134)*x881))+(((-0.191656562828474)*x879))+(((-54.39463575169)*pz))+(((-1.0)*x880*x882))+((x877*x878))))+IKsqr(((-6.76913659044695)+(((2.6693114600066)*pz))+(((-0.191656562828474)*x881))+((x877*x880))+((x877*x883))+((x882*x884))+((x878*x882))+(((-3.90553484697134)*x879))+(((54.39463575169)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.50448325689216)+(((-1.0)*x882*x883))+(((2.6693114600066)*py))+((x877*x884))+(((3.90553484697134)*x881))+(((-0.191656562828474)*x879))+(((-54.39463575169)*pz))+(((-1.0)*x880*x882))+((x877*x878))), ((-6.76913659044695)+(((2.6693114600066)*pz))+(((-0.191656562828474)*x881))+((x877*x880))+((x877*x883))+((x882*x884))+((x878*x882))+(((-3.90553484697134)*x879))+(((54.39463575169)*py))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x885=IKsin(j2);
IkReal x886=IKcos(j2);
IkReal x887=(cj4*sj5);
IkReal x888=(cj6*r11);
IkReal x889=(cj5*r12);
IkReal x890=(r20*sj6);
IkReal x891=((1.0)*cj4);
IkReal x892=(r10*sj6);
IkReal x893=(cj6*r10);
IkReal x894=(cj5*r22);
IkReal x895=(cj6*r20);
IkReal x896=(r11*sj6);
IkReal x897=(cj6*r21);
IkReal x898=((0.0718)*sj5);
IkReal x899=((1.0)*sj4);
IkReal x900=(r21*sj6);
IkReal x901=(sj5*x899);
evalcond[0]=((((-1.0)*x895*x899))+((sj4*x900))+x885+(((-1.0)*x891*x894))+((x887*x890))+((x887*x897)));
evalcond[1]=((-0.0215)+(((0.0009)*x886))+(((-1.0)*pz))+(((-1.0)*x897*x898))+(((0.0718)*x894))+(((-0.01834)*x885))+(((-1.0)*x890*x898)));
evalcond[2]=((((-1.0)*x890*x901))+((sj4*x894))+(((-1.0)*x897*x901))+((cj4*x900))+x886+(((-1.0)*x891*x895)));
evalcond[3]=(((sj4*x889))+(((-1.0)*x888*x901))+((cj4*x896))+(((-1.0)*x892*x901))+x885+(((-1.0)*x891*x893)));
evalcond[4]=((0.1255)+(((-1.0)*x892*x898))+(((0.0009)*x885))+(((-1.0)*py))+(((-1.0)*x888*x898))+(((0.0718)*x889))+(((0.01834)*x886)));
evalcond[5]=(((x887*x888))+((sj4*x896))+(((-1.0)*x886))+(((-1.0)*x889*x891))+(((-1.0)*x893*x899))+((x887*x892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x902=(cj5*cj6);
IkReal x903=(cj5*sj6);
if( IKabs(((((-1.0)*r20*x903))+(((-1.0)*r21*x902))+(((-1.0)*r22*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x902))+((r10*x903))+((r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x903))+(((-1.0)*r21*x902))+(((-1.0)*r22*sj5))))+IKsqr((((r11*x902))+((r10*x903))+((r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x903))+(((-1.0)*r21*x902))+(((-1.0)*r22*sj5))), (((r11*x902))+((r10*x903))+((r12*sj5))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x904=IKcos(j2);
IkReal x905=IKsin(j2);
IkReal x906=(cj5*cj6);
IkReal x907=(cj5*r12);
IkReal x908=(r10*sj6);
IkReal x909=(cj5*r22);
IkReal x910=(r20*sj6);
IkReal x911=(cj4*sj6);
IkReal x912=((0.0718)*sj5);
IkReal x913=((1.0)*cj4*cj6);
IkReal x914=((1.0)*sj4*sj5);
IkReal x915=(cj6*x914);
evalcond[0]=(((r21*x906))+((r22*sj5))+((cj5*x910))+x905);
evalcond[1]=(((r11*x906))+((cj5*x908))+((r12*sj5))+(((-1.0)*x904)));
evalcond[2]=((-0.0215)+(((-1.0)*pz))+(((-1.0)*x910*x912))+(((0.0009)*x904))+(((-1.0)*cj6*r21*x912))+(((-0.1158)*x905))+(((0.0718)*x909)));
evalcond[3]=((((-1.0)*r21*x915))+(((-1.0)*r20*x913))+(((-1.0)*x910*x914))+((sj4*x909))+((r21*x911))+x904);
evalcond[4]=((((-1.0)*x908*x914))+((r11*x911))+(((-1.0)*r11*x915))+(((-1.0)*r10*x913))+((sj4*x907))+x905);
evalcond[5]=((0.1255)+(((-1.0)*x908*x912))+(((-1.0)*cj6*r11*x912))+(((-1.0)*py))+(((0.0009)*x905))+(((0.1158)*x904))+(((0.0718)*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x916=(cj5*cj6);
IkReal x917=(cj5*sj6);
if( IKabs((((r22*sj5))+((r20*x917))+((r21*x916)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x916))+(((-1.0)*r10*x917))+(((-1.0)*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj5))+((r20*x917))+((r21*x916))))+IKsqr(((((-1.0)*r11*x916))+(((-1.0)*r10*x917))+(((-1.0)*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*sj5))+((r20*x917))+((r21*x916))), ((((-1.0)*r11*x916))+(((-1.0)*r10*x917))+(((-1.0)*r12*sj5))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x918=IKcos(j2);
IkReal x919=IKsin(j2);
IkReal x920=(cj5*cj6);
IkReal x921=(cj5*r12);
IkReal x922=(r10*sj6);
IkReal x923=(cj5*r22);
IkReal x924=(r20*sj6);
IkReal x925=(cj4*sj6);
IkReal x926=((0.0718)*sj5);
IkReal x927=((1.0)*cj4*cj6);
IkReal x928=((1.0)*sj4*sj5);
IkReal x929=(cj6*x928);
evalcond[0]=(((r11*x920))+((r12*sj5))+x918+((cj5*x922)));
evalcond[1]=(((r22*sj5))+((r21*x920))+(((-1.0)*x919))+((cj5*x924)));
evalcond[2]=((-0.0215)+(((0.0718)*x923))+(((-1.0)*cj6*r21*x926))+(((-1.0)*x924*x926))+(((-1.0)*pz))+(((0.0009)*x918))+(((-0.1158)*x919)));
evalcond[3]=((((-1.0)*r21*x929))+(((-1.0)*r20*x927))+((r21*x925))+(((-1.0)*x924*x928))+((sj4*x923))+x918);
evalcond[4]=((((-1.0)*r11*x929))+(((-1.0)*r10*x927))+((sj4*x921))+((r11*x925))+x919+(((-1.0)*x922*x928)));
evalcond[5]=((0.1255)+(((0.0718)*x921))+(((-1.0)*cj6*r11*x926))+(((-1.0)*py))+(((0.0009)*x919))+(((0.1158)*x918))+(((-1.0)*x922*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x930=((1.0)*sj6);
IkReal x931=(cj4*sj5);
IkReal x932=((1.0)*cj6);
CheckValue<IkReal> x933=IKPowWithIntegerCheck(sj3,-1);
if(!x933.valid){
continue;
}
CheckValue<IkReal> x934=IKPowWithIntegerCheck(cj3,-1);
if(!x934.valid){
continue;
}
if( IKabs(((x933.value)*(((((-1.0)*cj5*r20*x930))+(((-1.0)*cj5*r21*x932))+(((-1.0)*r22*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x934.value)*((((cj6*r10*sj4))+(((-1.0)*r11*x931*x932))+((cj4*cj5*r12))+(((-1.0)*r11*sj4*x930))+(((-1.0)*r10*x930*x931)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x933.value)*(((((-1.0)*cj5*r20*x930))+(((-1.0)*cj5*r21*x932))+(((-1.0)*r22*sj5))))))+IKsqr(((x934.value)*((((cj6*r10*sj4))+(((-1.0)*r11*x931*x932))+((cj4*cj5*r12))+(((-1.0)*r11*sj4*x930))+(((-1.0)*r10*x930*x931))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x933.value)*(((((-1.0)*cj5*r20*x930))+(((-1.0)*cj5*r21*x932))+(((-1.0)*r22*sj5))))), ((x934.value)*((((cj6*r10*sj4))+(((-1.0)*r11*x931*x932))+((cj4*cj5*r12))+(((-1.0)*r11*sj4*x930))+(((-1.0)*r10*x930*x931))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x935=IKcos(j2);
IkReal x936=IKsin(j2);
IkReal x937=(cj5*cj6);
IkReal x938=(cj5*r12);
IkReal x939=(r10*sj6);
IkReal x940=((1.0)*cj4);
IkReal x941=(cj6*r11);
IkReal x942=(cj6*r10);
IkReal x943=(cj5*r22);
IkReal x944=(r20*sj6);
IkReal x945=(cj6*r20);
IkReal x946=(cj4*sj5);
IkReal x947=(cj4*sj6);
IkReal x948=((0.0718)*sj5);
IkReal x949=(cj6*r21);
IkReal x950=((1.0)*sj4);
IkReal x951=(sj4*sj6);
IkReal x952=(cj3*x935);
IkReal x953=(sj6*x946);
IkReal x954=(sj5*x950);
IkReal x955=(cj3*x936);
evalcond[0]=(((r21*x937))+((r22*sj5))+((sj3*x936))+((cj5*x944)));
evalcond[1]=(((r11*x937))+((r12*sj5))+(((-1.0)*sj3*x935))+((cj5*x939)));
evalcond[2]=(((r21*x947))+(((-1.0)*x944*x954))+((sj4*x943))+(((-1.0)*x949*x954))+x935+(((-1.0)*x940*x945)));
evalcond[3]=((((-1.0)*x941*x954))+((sj4*x938))+(((-1.0)*x939*x954))+((r11*x947))+x936+(((-1.0)*x940*x942)));
evalcond[4]=((((-1.0)*x938*x940))+((x939*x946))+((x941*x946))+(((-1.0)*x942*x950))+((r11*x951))+x952);
evalcond[5]=(((x946*x949))+(((-1.0)*x955))+((r21*x951))+((x944*x946))+(((-1.0)*x945*x950))+(((-1.0)*x940*x943)));
evalcond[6]=((-0.0215)+(((0.0009)*x935))+(((0.0718)*x943))+(((-0.1158)*x936))+(((-1.0)*x948*x949))+(((-1.0)*pz))+(((-1.0)*x944*x948))+(((-0.09746)*x955)));
evalcond[7]=((0.1255)+(((0.0009)*x936))+(((0.0718)*x938))+(((0.1158)*x935))+(((-1.0)*x939*x948))+(((0.09746)*x952))+(((-1.0)*x941*x948))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x956=(sj4*sj5);
IkReal x957=(cj6*r11);
IkReal x958=(r10*sj6);
CheckValue<IkReal> x959=IKPowWithIntegerCheck(sj3,-1);
if(!x959.valid){
continue;
}
if( IKabs(((((-1.0)*cj5*r12*sj4))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+((x956*x957))+((x956*x958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x959.value)*((((cj5*x958))+((cj5*x957))+((r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r12*sj4))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+((x956*x957))+((x956*x958))))+IKsqr(((x959.value)*((((cj5*x958))+((cj5*x957))+((r12*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj5*r12*sj4))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+((x956*x957))+((x956*x958))), ((x959.value)*((((cj5*x958))+((cj5*x957))+((r12*sj5))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x960=IKcos(j2);
IkReal x961=IKsin(j2);
IkReal x962=(cj5*cj6);
IkReal x963=(cj5*r12);
IkReal x964=(r10*sj6);
IkReal x965=((1.0)*cj4);
IkReal x966=(cj6*r11);
IkReal x967=(cj6*r10);
IkReal x968=(cj5*r22);
IkReal x969=(r20*sj6);
IkReal x970=(cj6*r20);
IkReal x971=(cj4*sj5);
IkReal x972=(cj4*sj6);
IkReal x973=((0.0718)*sj5);
IkReal x974=(cj6*r21);
IkReal x975=((1.0)*sj4);
IkReal x976=(sj4*sj6);
IkReal x977=(cj3*x960);
IkReal x978=(sj6*x971);
IkReal x979=(sj5*x975);
IkReal x980=(cj3*x961);
evalcond[0]=(((r22*sj5))+((r21*x962))+((sj3*x961))+((cj5*x969)));
evalcond[1]=(((r11*x962))+((r12*sj5))+(((-1.0)*sj3*x960))+((cj5*x964)));
evalcond[2]=((((-1.0)*x965*x970))+(((-1.0)*x969*x979))+((sj4*x968))+((r21*x972))+(((-1.0)*x974*x979))+x960);
evalcond[3]=((((-1.0)*x965*x967))+((sj4*x963))+(((-1.0)*x966*x979))+(((-1.0)*x964*x979))+((r11*x972))+x961);
evalcond[4]=((((-1.0)*x963*x965))+(((-1.0)*x967*x975))+((x966*x971))+((x964*x971))+((r11*x976))+x977);
evalcond[5]=(((x969*x971))+(((-1.0)*x980))+(((-1.0)*x965*x968))+((r21*x976))+(((-1.0)*x970*x975))+((x971*x974)));
evalcond[6]=((-0.0215)+(((-1.0)*x969*x973))+(((0.0009)*x960))+(((-0.1158)*x961))+(((0.0718)*x968))+(((-0.09746)*x980))+(((-1.0)*pz))+(((-1.0)*x973*x974)));
evalcond[7]=((0.1255)+(((0.0009)*x961))+(((0.09746)*x977))+(((0.0718)*x963))+(((0.1158)*x960))+(((-1.0)*x966*x973))+(((-1.0)*x964*x973))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x981=(cj5*cj6);
IkReal x982=(cj5*sj6);
CheckValue<IkReal> x983=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x983.valid){
continue;
}
CheckValue<IkReal> x984 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x982))+(((-1.0)*r22*sj5))+(((-1.0)*r21*x981)))),IkReal((((r12*sj5))+((r11*x981))+((r10*x982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x984.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x983.value)))+(x984.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x985=IKcos(j2);
IkReal x986=IKsin(j2);
IkReal x987=(cj5*cj6);
IkReal x988=(cj5*r12);
IkReal x989=(r10*sj6);
IkReal x990=((1.0)*cj4);
IkReal x991=(cj6*r11);
IkReal x992=(cj6*r10);
IkReal x993=(cj5*r22);
IkReal x994=(r20*sj6);
IkReal x995=(cj6*r20);
IkReal x996=(cj4*sj5);
IkReal x997=(cj4*sj6);
IkReal x998=((0.0718)*sj5);
IkReal x999=(cj6*r21);
IkReal x1000=((1.0)*sj4);
IkReal x1001=(sj4*sj6);
IkReal x1002=(cj3*x985);
IkReal x1003=(sj6*x996);
IkReal x1004=(sj5*x1000);
IkReal x1005=(cj3*x986);
evalcond[0]=(((cj5*x994))+((r22*sj5))+((r21*x987))+((sj3*x986)));
evalcond[1]=(((cj5*x989))+((r12*sj5))+(((-1.0)*sj3*x985))+((r11*x987)));
evalcond[2]=(((sj4*x993))+(((-1.0)*x990*x995))+((r21*x997))+(((-1.0)*x1004*x999))+(((-1.0)*x1004*x994))+x985);
evalcond[3]=((((-1.0)*x990*x992))+((sj4*x988))+(((-1.0)*x1004*x989))+(((-1.0)*x1004*x991))+x986+((r11*x997)));
evalcond[4]=(((x989*x996))+((x991*x996))+x1002+(((-1.0)*x1000*x992))+((r11*x1001))+(((-1.0)*x988*x990)));
evalcond[5]=((((-1.0)*x1005))+((x994*x996))+(((-1.0)*x990*x993))+((r21*x1001))+(((-1.0)*x1000*x995))+((x996*x999)));
evalcond[6]=((-0.0215)+(((0.0009)*x985))+(((-1.0)*x994*x998))+(((-0.1158)*x986))+(((0.0718)*x993))+(((-1.0)*pz))+(((-0.09746)*x1005))+(((-1.0)*x998*x999)));
evalcond[7]=((0.1255)+(((0.09746)*x1002))+(((0.0009)*x986))+(((-1.0)*x991*x998))+(((0.0718)*x988))+(((0.1158)*x985))+(((-1.0)*py))+(((-1.0)*x989*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1006=(sj4*sj5);
IkReal x1007=(cj4*sj6);
IkReal x1008=((1.0)*cj6);
IkReal x1009=(cj5*sj4);
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(sj1,-1);
if(!x1010.valid){
continue;
}
if( IKabs(((x1010.value)*(((((-1.0)*r11*x1006*x1008))+(((-1.0)*cj4*r10*x1008))+((r11*x1007))+(((-1.0)*r10*sj6*x1006))+((r12*x1009)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r21*x1006))+((r20*sj6*x1006))+((cj4*cj6*r20))+(((-1.0)*r22*x1009))+(((-1.0)*r21*x1007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1010.value)*(((((-1.0)*r11*x1006*x1008))+(((-1.0)*cj4*r10*x1008))+((r11*x1007))+(((-1.0)*r10*sj6*x1006))+((r12*x1009))))))+IKsqr((((cj6*r21*x1006))+((r20*sj6*x1006))+((cj4*cj6*r20))+(((-1.0)*r22*x1009))+(((-1.0)*r21*x1007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1010.value)*(((((-1.0)*r11*x1006*x1008))+(((-1.0)*cj4*r10*x1008))+((r11*x1007))+(((-1.0)*r10*sj6*x1006))+((r12*x1009))))), (((cj6*r21*x1006))+((r20*sj6*x1006))+((cj4*cj6*r20))+(((-1.0)*r22*x1009))+(((-1.0)*r21*x1007))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x1011=IKsin(j2);
IkReal x1012=(cj5*sj4);
IkReal x1013=(cj4*sj6);
IkReal x1014=((1.0)*cj6);
IkReal x1015=(sj4*sj5);
IkReal x1016=((1.0)*sj6);
IkReal x1017=((1.0)*x1011);
evalcond[0]=(((r22*x1012))+(((-1.0)*r20*x1015*x1016))+((r21*x1013))+(IKcos(j2))+(((-1.0)*r21*x1014*x1015))+(((-1.0)*cj4*r20*x1014)));
evalcond[1]=((((-1.0)*r00*x1015*x1016))+((r02*x1012))+(((-1.0)*cj1*x1017))+(((-1.0)*cj4*r00*x1014))+((r01*x1013))+(((-1.0)*r01*x1014*x1015)));
evalcond[2]=((((-1.0)*r11*x1014*x1015))+(((-1.0)*cj4*r10*x1014))+(((-1.0)*r10*x1015*x1016))+((r12*x1012))+(((-1.0)*sj1*x1017))+((r11*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1018=(r00*sj6);
IkReal x1019=((1.0)*sj1);
IkReal x1020=(r02*sj5);
IkReal x1021=(r12*sj5);
IkReal x1022=(cj1*cj5);
IkReal x1023=(r10*sj6);
IkReal x1024=((1.0)*x1022);
IkReal x1025=(cj5*cj6*x1019);
if( IKabs(((((-1.0)*cj1*x1020))+(((-1.0)*r11*x1025))+(((-1.0)*x1018*x1024))+(((-1.0)*x1019*x1021))+(((-1.0)*cj5*x1019*x1023))+(((-1.0)*cj6*r01*x1024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1019*x1020))+((x1022*x1023))+((cj6*r11*x1022))+(((-1.0)*r01*x1025))+(((-1.0)*cj5*x1018*x1019))+((cj1*x1021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1020))+(((-1.0)*r11*x1025))+(((-1.0)*x1018*x1024))+(((-1.0)*x1019*x1021))+(((-1.0)*cj5*x1019*x1023))+(((-1.0)*cj6*r01*x1024))))+IKsqr(((((-1.0)*x1019*x1020))+((x1022*x1023))+((cj6*r11*x1022))+(((-1.0)*r01*x1025))+(((-1.0)*cj5*x1018*x1019))+((cj1*x1021))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj1*x1020))+(((-1.0)*r11*x1025))+(((-1.0)*x1018*x1024))+(((-1.0)*x1019*x1021))+(((-1.0)*cj5*x1019*x1023))+(((-1.0)*cj6*r01*x1024))), ((((-1.0)*x1019*x1020))+((x1022*x1023))+((cj6*r11*x1022))+(((-1.0)*r01*x1025))+(((-1.0)*cj5*x1018*x1019))+((cj1*x1021))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1026=IKsin(j3);
IkReal x1027=IKcos(j3);
IkReal x1028=(sj5*sj6);
IkReal x1029=(cj5*r12);
IkReal x1030=(cj5*cj6);
IkReal x1031=(cj5*sj6);
IkReal x1032=((1.0)*cj4);
IkReal x1033=(cj5*r02);
IkReal x1034=(sj4*sj6);
IkReal x1035=(sj1*x1026);
IkReal x1036=(cj1*x1026);
IkReal x1037=((1.0)*cj6*sj4);
IkReal x1038=((1.0)*x1027);
IkReal x1039=(cj6*r11*sj5);
IkReal x1040=(sj1*x1027);
IkReal x1041=(cj6*r01*sj5);
IkReal x1042=(cj1*x1038);
evalcond[0]=(((r00*x1031))+x1040+x1036+((r02*sj5))+((r01*x1030)));
evalcond[1]=(((r10*x1031))+x1035+((r12*sj5))+((r11*x1030))+(((-1.0)*x1042)));
evalcond[2]=(x1035+(((-1.0)*x1032*x1033))+((cj4*r00*x1028))+((cj4*x1041))+(((-1.0)*r00*x1037))+(((-1.0)*x1042))+((r01*x1034)));
evalcond[3]=((((0.0718)*x1033))+(((0.09746)*x1035))+(((-0.0718)*r00*x1028))+(((-0.0001)*sj1))+(((-0.09746)*cj1*x1027))+(((-1.0)*px))+(((-0.2413)*cj1))+(((-0.0718)*x1041)));
evalcond[4]=((((-0.0718)*r10*x1028))+(((-0.0718)*x1039))+(((-0.09746)*x1040))+(((-1.0)*py))+(((0.0001)*cj1))+(((-0.2413)*sj1))+(((-0.09746)*x1036))+(((0.0718)*x1029)));
evalcond[5]=((((-1.0)*r10*x1037))+(((-1.0)*x1036))+(((-1.0)*x1029*x1032))+((cj4*x1039))+((cj4*r10*x1028))+(((-1.0)*sj1*x1038))+((r11*x1034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1043=(cj6*r01);
IkReal x1044=(r00*sj6);
IkReal x1045=(sj1*sj5);
IkReal x1046=(cj5*sj1);
IkReal x1047=(r10*sj6);
IkReal x1048=(cj1*cj5);
IkReal x1049=(cj1*sj5);
IkReal x1050=(cj6*r11);
IkReal x1051=((1.0)*x1046);
if( IKabs((((r02*x1049))+((x1043*x1048))+((x1046*x1050))+((x1046*x1047))+((r12*x1045))+((x1044*x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1044*x1051))+(((-1.0)*x1043*x1051))+(((-1.0)*r02*x1045))+((x1048*x1050))+((x1047*x1048))+((r12*x1049)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1049))+((x1043*x1048))+((x1046*x1050))+((x1046*x1047))+((r12*x1045))+((x1044*x1048))))+IKsqr(((((-1.0)*x1044*x1051))+(((-1.0)*x1043*x1051))+(((-1.0)*r02*x1045))+((x1048*x1050))+((x1047*x1048))+((r12*x1049))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r02*x1049))+((x1043*x1048))+((x1046*x1050))+((x1046*x1047))+((r12*x1045))+((x1044*x1048))), ((((-1.0)*x1044*x1051))+(((-1.0)*x1043*x1051))+(((-1.0)*r02*x1045))+((x1048*x1050))+((x1047*x1048))+((r12*x1049))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1052=IKcos(j3);
IkReal x1053=IKsin(j3);
IkReal x1054=(r00*sj6);
IkReal x1055=((0.0718)*sj5);
IkReal x1056=(cj5*r12);
IkReal x1057=(cj5*cj6);
IkReal x1058=(r10*sj6);
IkReal x1059=((1.0)*cj4);
IkReal x1060=(cj4*sj5);
IkReal x1061=(cj6*r11);
IkReal x1062=(cj6*r01);
IkReal x1063=(cj5*r02);
IkReal x1064=(sj4*sj6);
IkReal x1065=(sj1*x1052);
IkReal x1066=((1.0)*cj6*sj4);
IkReal x1067=(cj1*x1052);
IkReal x1068=(sj1*x1053);
IkReal x1069=(cj1*x1053);
IkReal x1070=((1.0)*x1069);
evalcond[0]=(x1065+((r02*sj5))+((r01*x1057))+((cj5*x1054))+(((-1.0)*x1070)));
evalcond[1]=(((r11*x1057))+((r12*sj5))+((cj5*x1058))+(((-1.0)*x1067))+(((-1.0)*x1068)));
evalcond[2]=(x1068+x1067+((x1060*x1062))+(((-1.0)*r00*x1066))+((x1054*x1060))+(((-1.0)*x1059*x1063))+((r01*x1064)));
evalcond[3]=(x1065+((x1060*x1061))+(((-1.0)*r10*x1066))+(((-1.0)*x1056*x1059))+(((-1.0)*x1070))+((x1058*x1060))+((r11*x1064)));
evalcond[4]=((((-0.0001)*sj1))+(((0.0718)*x1063))+(((-1.0)*px))+(((-1.0)*x1054*x1055))+(((-0.0097)*cj1))+(((-1.0)*x1055*x1062))+(((0.09746)*x1068))+(((0.09746)*x1067)));
evalcond[5]=((((-0.0097)*sj1))+(((-1.0)*py))+(((0.0718)*x1056))+(((-0.09746)*x1069))+(((-1.0)*x1055*x1058))+(((-1.0)*x1055*x1061))+(((0.0001)*cj1))+(((0.09746)*x1065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1071=(cj6*r11);
IkReal x1072=(r10*sj6);
IkReal x1073=((0.736712497434845)*sj5);
if( IKabs(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-1.0)*x1071*x1073))+(((-10.2606197414324)*py))+(((-1.0)*x1072*x1073)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*x1071))+((cj5*x1072))+((r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-1.0)*x1071*x1073))+(((-10.2606197414324)*py))+(((-1.0)*x1072*x1073))))+IKsqr((((cj5*x1071))+((cj5*x1072))+((r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-1.0)*x1071*x1073))+(((-10.2606197414324)*py))+(((-1.0)*x1072*x1073))), (((cj5*x1071))+((cj5*x1072))+((r12*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1074=IKsin(j3);
IkReal x1075=IKcos(j3);
IkReal x1076=(sj5*sj6);
IkReal x1077=(cj5*cj6);
IkReal x1078=(cj5*r12);
IkReal x1079=(cj5*sj6);
IkReal x1080=((1.0)*cj4);
IkReal x1081=(cj6*sj5);
IkReal x1082=(cj5*r02);
IkReal x1083=(cj5*r22);
IkReal x1084=(sj4*sj6);
IkReal x1085=((1.0)*x1075);
IkReal x1086=((1.0)*cj6*sj4);
IkReal x1087=(r11*x1081);
IkReal x1088=((0.09746)*x1075);
evalcond[0]=(((r22*sj5))+((sj2*x1074))+((r20*x1079))+((r21*x1077)));
evalcond[1]=(((cj2*x1074))+((r02*sj5))+((r00*x1079))+((r01*x1077)));
evalcond[2]=(((r12*sj5))+((r10*x1079))+(((-1.0)*x1085))+((r11*x1077)));
evalcond[3]=((0.0001)+(((0.0718)*x1078))+(((-1.0)*py))+(((-0.09746)*x1074))+(((-0.0718)*r10*x1076))+(((-0.0718)*x1087)));
evalcond[4]=(((cj4*x1087))+(((-1.0)*r10*x1086))+((cj4*r10*x1076))+(((-1.0)*x1078*x1080))+((r11*x1084))+(((-1.0)*x1074)));
evalcond[5]=((-0.0215)+(((-1.0)*sj2*x1088))+(((-0.1158)*sj2))+(((-0.0718)*r21*x1081))+(((0.0009)*cj2))+(((-1.0)*pz))+(((0.0718)*x1083))+(((-0.0718)*r20*x1076)));
evalcond[6]=((((-1.0)*sj2*x1085))+((cj4*r20*x1076))+(((-1.0)*x1080*x1083))+((cj4*r21*x1081))+(((-1.0)*r20*x1086))+((r21*x1084)));
evalcond[7]=(((cj4*r01*x1081))+((cj4*r00*x1076))+((r01*x1084))+(((-1.0)*x1080*x1082))+(((-1.0)*r00*x1086))+(((-1.0)*cj2*x1085)));
evalcond[8]=((-0.1255)+(((-0.0718)*r01*x1081))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+(((-1.0)*px))+(((0.0718)*x1082))+(((-0.0718)*r00*x1076))+(((-1.0)*cj2*x1088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1089=((1.0)*cj5);
IkReal x1090=(r10*sj6);
IkReal x1091=(cj6*r11);
IkReal x1092=((0.736712497434845)*sj5);
if( IKabs(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+(((10.2606197414324)*py))+((x1091*x1092))+((x1090*x1092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1089*x1090))+(((-1.0)*x1089*x1091))+(((-1.0)*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+(((10.2606197414324)*py))+((x1091*x1092))+((x1090*x1092))))+IKsqr(((((-1.0)*x1089*x1090))+(((-1.0)*x1089*x1091))+(((-1.0)*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+(((10.2606197414324)*py))+((x1091*x1092))+((x1090*x1092))), ((((-1.0)*x1089*x1090))+(((-1.0)*x1089*x1091))+(((-1.0)*r12*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1093=IKsin(j3);
IkReal x1094=IKcos(j3);
IkReal x1095=(sj5*sj6);
IkReal x1096=(cj5*cj6);
IkReal x1097=(cj5*r12);
IkReal x1098=(cj5*sj6);
IkReal x1099=((1.0)*cj4);
IkReal x1100=(cj6*sj5);
IkReal x1101=(cj5*r02);
IkReal x1102=(cj5*r22);
IkReal x1103=(sj4*sj6);
IkReal x1104=(sj2*x1094);
IkReal x1105=((1.0)*cj6*sj4);
IkReal x1106=(r11*x1100);
IkReal x1107=(cj2*x1094);
evalcond[0]=(x1094+((r10*x1098))+((r11*x1096))+((r12*sj5)));
evalcond[1]=(((r22*sj5))+((r21*x1096))+((sj2*x1093))+((r20*x1098)));
evalcond[2]=((((-1.0)*cj2*x1093))+((r01*x1096))+((r00*x1098))+((r02*sj5)));
evalcond[3]=((-0.0001)+(((0.09746)*x1093))+(((-1.0)*py))+(((-0.0718)*r10*x1095))+(((0.0718)*x1097))+(((-0.0718)*x1106)));
evalcond[4]=(((cj4*r10*x1095))+x1093+((cj4*x1106))+(((-1.0)*x1097*x1099))+((r11*x1103))+(((-1.0)*r10*x1105)));
evalcond[5]=(x1107+(((-1.0)*r00*x1105))+((r01*x1103))+(((-1.0)*x1099*x1101))+((cj4*r01*x1100))+((cj4*r00*x1095)));
evalcond[6]=((-0.0215)+(((-0.09746)*x1104))+(((-0.1158)*sj2))+(((0.0718)*x1102))+(((0.0009)*cj2))+(((-1.0)*pz))+(((-0.0718)*r21*x1100))+(((-0.0718)*r20*x1095)));
evalcond[7]=((((-1.0)*x1104))+((cj4*r21*x1100))+((cj4*r20*x1095))+(((-1.0)*r20*x1105))+(((-1.0)*x1099*x1102))+((r21*x1103)));
evalcond[8]=((0.1255)+(((0.1158)*cj2))+(((0.0718)*x1101))+(((-0.0718)*r01*x1100))+(((-1.0)*px))+(((-0.0718)*r00*x1095))+(((0.0009)*sj2))+(((0.09746)*x1107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1108=(cj6*r21);
IkReal x1109=((0.736712497434845)*sj5);
IkReal x1110=((1.0)*cj5);
IkReal x1111=(r20*sj6);
if( IKabs(((((-1.0)*x1108*x1110))+(((-1.0)*r22*sj5))+(((-1.0)*x1110*x1111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.40878309049867)+(((-1.0)*x1109*x1111))+(((-10.2606197414324)*pz))+(((0.736712497434845)*cj5*r22))+(((-1.0)*x1108*x1109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1108*x1110))+(((-1.0)*r22*sj5))+(((-1.0)*x1110*x1111))))+IKsqr(((-1.40878309049867)+(((-1.0)*x1109*x1111))+(((-10.2606197414324)*pz))+(((0.736712497434845)*cj5*r22))+(((-1.0)*x1108*x1109))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1108*x1110))+(((-1.0)*r22*sj5))+(((-1.0)*x1110*x1111))), ((-1.40878309049867)+(((-1.0)*x1109*x1111))+(((-10.2606197414324)*pz))+(((0.736712497434845)*cj5*r22))+(((-1.0)*x1108*x1109))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1112=IKcos(j3);
IkReal x1113=IKsin(j3);
IkReal x1114=(sj5*sj6);
IkReal x1115=(cj5*cj6);
IkReal x1116=(cj5*r12);
IkReal x1117=(cj5*sj6);
IkReal x1118=((1.0)*cj4);
IkReal x1119=((1.0)*cj1);
IkReal x1120=(cj6*sj5);
IkReal x1121=(cj5*r02);
IkReal x1122=(cj5*r22);
IkReal x1123=(sj4*sj6);
IkReal x1124=((1.0)*cj6*sj4);
IkReal x1125=(r11*x1120);
IkReal x1126=(sj1*x1113);
evalcond[0]=(x1113+((r20*x1117))+((r22*sj5))+((r21*x1115)));
evalcond[1]=(((r01*x1115))+((r02*sj5))+((r00*x1117))+((sj1*x1112)));
evalcond[2]=((((-1.0)*x1112*x1119))+((r12*sj5))+((r11*x1115))+((r10*x1117)));
evalcond[3]=((-0.1373)+(((-0.09746)*x1112))+(((0.0718)*x1122))+(((-1.0)*pz))+(((-0.0718)*r20*x1114))+(((-0.0718)*r21*x1120)));
evalcond[4]=((((-1.0)*x1112))+((cj4*r20*x1114))+((r21*x1123))+(((-1.0)*r20*x1124))+((cj4*r21*x1120))+(((-1.0)*x1118*x1122)));
evalcond[5]=(x1126+((r01*x1123))+((cj4*r01*x1120))+((cj4*r00*x1114))+(((-1.0)*r00*x1124))+(((-1.0)*x1118*x1121)));
evalcond[6]=((((-0.0718)*r01*x1120))+(((0.0718)*x1121))+(((-0.0001)*sj1))+(((-0.1264)*cj1))+(((-1.0)*px))+(((0.09746)*x1126))+(((-0.0718)*r00*x1114)));
evalcond[7]=((((-0.1264)*sj1))+(((0.0718)*x1116))+(((-1.0)*py))+(((-0.0718)*x1125))+(((-0.09746)*cj1*x1113))+(((0.0001)*cj1))+(((-0.0718)*r10*x1114)));
evalcond[8]=((((-1.0)*x1116*x1118))+(((-1.0)*r10*x1124))+(((-1.0)*x1113*x1119))+((cj4*r10*x1114))+((cj4*x1125))+((r11*x1123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1127=(cj6*r21);
IkReal x1128=((0.736712497434845)*sj5);
IkReal x1129=(r20*sj6);
if( IKabs((((r22*sj5))+((cj5*x1129))+((cj5*x1127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.967576441617074)+((x1127*x1128))+(((10.2606197414324)*pz))+(((-0.736712497434845)*cj5*r22))+((x1128*x1129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj5))+((cj5*x1129))+((cj5*x1127))))+IKsqr(((-0.967576441617074)+((x1127*x1128))+(((10.2606197414324)*pz))+(((-0.736712497434845)*cj5*r22))+((x1128*x1129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r22*sj5))+((cj5*x1129))+((cj5*x1127))), ((-0.967576441617074)+((x1127*x1128))+(((10.2606197414324)*pz))+(((-0.736712497434845)*cj5*r22))+((x1128*x1129))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1130=IKcos(j3);
IkReal x1131=IKsin(j3);
IkReal x1132=(sj5*sj6);
IkReal x1133=(cj5*cj6);
IkReal x1134=(cj5*r12);
IkReal x1135=(cj5*sj6);
IkReal x1136=((1.0)*cj4);
IkReal x1137=((1.0)*cj1);
IkReal x1138=(cj6*sj5);
IkReal x1139=(cj5*r02);
IkReal x1140=(cj5*r22);
IkReal x1141=(sj4*sj6);
IkReal x1142=((1.0)*cj6*sj4);
IkReal x1143=(r11*x1138);
IkReal x1144=(sj1*x1131);
evalcond[0]=(((r22*sj5))+((r21*x1133))+(((-1.0)*x1131))+((r20*x1135)));
evalcond[1]=(((r01*x1133))+((r00*x1135))+((sj1*x1130))+((r02*sj5)));
evalcond[2]=(((r10*x1135))+(((-1.0)*x1130*x1137))+((r12*sj5))+((r11*x1133)));
evalcond[3]=((0.0943)+(((-0.0718)*r20*x1132))+(((0.0718)*x1140))+(((-1.0)*pz))+(((-0.0718)*r21*x1138))+(((0.09746)*x1130)));
evalcond[4]=((((-1.0)*x1136*x1140))+x1130+(((-1.0)*r20*x1142))+((r21*x1141))+((cj4*r21*x1138))+((cj4*r20*x1132)));
evalcond[5]=(x1144+(((-1.0)*r00*x1142))+((cj4*r00*x1132))+((cj4*r01*x1138))+(((-1.0)*x1136*x1139))+((r01*x1141)));
evalcond[6]=((((-0.0718)*r01*x1138))+(((0.0718)*x1139))+(((-0.0001)*sj1))+(((-1.0)*px))+(((0.09746)*x1144))+(((-0.0718)*r00*x1132))+(((-0.1246)*cj1)));
evalcond[7]=((((0.0718)*x1134))+(((-0.1246)*sj1))+(((-0.0718)*r10*x1132))+(((-1.0)*py))+(((0.0001)*cj1))+(((-0.0718)*x1143))+(((-0.09746)*cj1*x1131)));
evalcond[8]=(((r11*x1141))+(((-1.0)*x1131*x1137))+(((-1.0)*r10*x1142))+(((-1.0)*x1134*x1136))+((cj4*r10*x1132))+((cj4*x1143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1150=IKPowWithIntegerCheck(sj2,-1);
if(!x1150.valid){
continue;
}
IkReal x1145=x1150.value;
IkReal x1146=((1.0)*sj5);
IkReal x1147=(cj1*cj2);
IkReal x1148=(cj5*r20*sj6);
IkReal x1149=((1.0)*cj5*cj6);
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(sj1,-1);
if(!x1151.valid){
continue;
}
if( IKabs((x1145*(((((-1.0)*x1148))+(((-1.0)*r21*x1149))+(((-1.0)*r22*x1146)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1145*(x1151.value)*((((r22*sj5*x1147))+(((-1.0)*cj5*r00*sj2*sj6))+(((-1.0)*r01*sj2*x1149))+((x1147*x1148))+(((-1.0)*r02*sj2*x1146))+((cj5*cj6*r21*x1147)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1145*(((((-1.0)*x1148))+(((-1.0)*r21*x1149))+(((-1.0)*r22*x1146))))))+IKsqr((x1145*(x1151.value)*((((r22*sj5*x1147))+(((-1.0)*cj5*r00*sj2*sj6))+(((-1.0)*r01*sj2*x1149))+((x1147*x1148))+(((-1.0)*r02*sj2*x1146))+((cj5*cj6*r21*x1147))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1145*(((((-1.0)*x1148))+(((-1.0)*r21*x1149))+(((-1.0)*r22*x1146))))), (x1145*(x1151.value)*((((r22*sj5*x1147))+(((-1.0)*cj5*r00*sj2*sj6))+(((-1.0)*r01*sj2*x1149))+((x1147*x1148))+(((-1.0)*r02*sj2*x1146))+((cj5*cj6*r21*x1147))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1152=IKsin(j3);
IkReal x1153=IKcos(j3);
IkReal x1154=(cj6*r11);
IkReal x1155=(cj4*sj5);
IkReal x1156=((0.0718)*sj5);
IkReal x1157=(r00*sj6);
IkReal x1158=(cj5*cj6);
IkReal x1159=(cj5*r12);
IkReal x1160=(cj1*cj2);
IkReal x1161=(r10*sj6);
IkReal x1162=((1.0)*cj4);
IkReal x1163=((0.0009)*sj2);
IkReal x1164=(r20*sj6);
IkReal x1165=(cj6*r01);
IkReal x1166=(cj5*r02);
IkReal x1167=(cj5*r22);
IkReal x1168=(cj6*r21);
IkReal x1169=(cj2*sj1);
IkReal x1170=(sj4*sj6);
IkReal x1171=((1.0)*x1153);
IkReal x1172=((1.0)*cj6*sj4);
IkReal x1173=((0.09746)*x1153);
IkReal x1174=(sj1*x1152);
IkReal x1175=(cj1*x1152);
evalcond[0]=(((r22*sj5))+((sj2*x1152))+((cj5*x1164))+((r21*x1158)));
evalcond[1]=(((r02*sj5))+((x1152*x1160))+((sj1*x1153))+((cj5*x1157))+((r01*x1158)));
evalcond[2]=(((cj5*x1161))+(((-1.0)*cj1*x1171))+((r12*sj5))+((x1152*x1169))+((cj5*x1154)));
evalcond[3]=((-0.0215)+(((-1.0)*x1156*x1164))+(((-1.0)*x1156*x1168))+(((-0.1158)*sj2))+(((-1.0)*sj2*x1173))+(((0.0009)*cj2))+(((-1.0)*pz))+(((0.0718)*x1167)));
evalcond[4]=((((-1.0)*r20*x1172))+((r21*x1170))+(((-1.0)*x1162*x1167))+(((-1.0)*sj2*x1171))+((x1155*x1164))+((x1155*x1168)));
evalcond[5]=(x1174+(((-1.0)*x1162*x1166))+((r01*x1170))+((x1155*x1165))+(((-1.0)*r00*x1172))+(((-1.0)*x1160*x1171))+((x1155*x1157)));
evalcond[6]=((((-1.0)*x1159*x1162))+((x1155*x1161))+((r11*x1170))+(((-1.0)*x1169*x1171))+((x1154*x1155))+(((-1.0)*r10*x1172))+(((-1.0)*x1175)));
evalcond[7]=((((-1.0)*x1156*x1165))+(((0.09746)*x1174))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-1.0)*x1156*x1157))+(((-1.0)*px))+(((-1.0)*cj1*x1163))+(((-0.1158)*x1160))+(((-1.0)*x1160*x1173))+(((0.0718)*x1166)));
evalcond[8]=((((-1.0)*x1156*x1161))+(((-0.1255)*sj1))+(((-1.0)*x1154*x1156))+(((-0.09746)*x1175))+(((0.0718)*x1159))+(((-1.0)*sj1*x1163))+(((-1.0)*py))+(((-0.1158)*x1169))+(((-1.0)*x1169*x1173))+(((0.0001)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(sj2,-1);
if(!x1181.valid){
continue;
}
IkReal x1176=x1181.value;
IkReal x1177=(r20*sj6);
IkReal x1178=((3590.0)*sj5);
IkReal x1179=((1.0)*cj5);
IkReal x1180=(cj6*r21);
if( IKabs((x1176*(((((-1.0)*x1179*x1180))+(((-1.0)*r22*sj5))+(((-1.0)*x1177*x1179)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000205212394828648)*x1176*(((-1075.0)+(((3590.0)*cj5*r22))+(((45.0)*cj2))+(((-1.0)*x1178*x1180))+(((-5790.0)*sj2))+(((-50000.0)*pz))+(((-1.0)*x1177*x1178)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1176*(((((-1.0)*x1179*x1180))+(((-1.0)*r22*sj5))+(((-1.0)*x1177*x1179))))))+IKsqr(((0.000205212394828648)*x1176*(((-1075.0)+(((3590.0)*cj5*r22))+(((45.0)*cj2))+(((-1.0)*x1178*x1180))+(((-5790.0)*sj2))+(((-50000.0)*pz))+(((-1.0)*x1177*x1178))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1176*(((((-1.0)*x1179*x1180))+(((-1.0)*r22*sj5))+(((-1.0)*x1177*x1179))))), ((0.000205212394828648)*x1176*(((-1075.0)+(((3590.0)*cj5*r22))+(((45.0)*cj2))+(((-1.0)*x1178*x1180))+(((-5790.0)*sj2))+(((-50000.0)*pz))+(((-1.0)*x1177*x1178))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1182=IKsin(j3);
IkReal x1183=IKcos(j3);
IkReal x1184=(cj6*r11);
IkReal x1185=(cj4*sj5);
IkReal x1186=((0.0718)*sj5);
IkReal x1187=(r00*sj6);
IkReal x1188=(cj5*cj6);
IkReal x1189=(cj5*r12);
IkReal x1190=(cj1*cj2);
IkReal x1191=(r10*sj6);
IkReal x1192=((1.0)*cj4);
IkReal x1193=((0.0009)*sj2);
IkReal x1194=(r20*sj6);
IkReal x1195=(cj6*r01);
IkReal x1196=(cj5*r02);
IkReal x1197=(cj5*r22);
IkReal x1198=(cj6*r21);
IkReal x1199=(cj2*sj1);
IkReal x1200=(sj4*sj6);
IkReal x1201=((1.0)*x1183);
IkReal x1202=((1.0)*cj6*sj4);
IkReal x1203=((0.09746)*x1183);
IkReal x1204=(sj1*x1182);
IkReal x1205=(cj1*x1182);
evalcond[0]=(((r22*sj5))+((cj5*x1194))+((sj2*x1182))+((r21*x1188)));
evalcond[1]=(((x1182*x1190))+((r01*x1188))+((sj1*x1183))+((cj5*x1187))+((r02*sj5)));
evalcond[2]=(((x1182*x1199))+((cj5*x1184))+(((-1.0)*cj1*x1201))+((cj5*x1191))+((r12*sj5)));
evalcond[3]=((-0.0215)+(((-0.1158)*sj2))+(((-1.0)*sj2*x1203))+(((-1.0)*x1186*x1194))+(((-1.0)*x1186*x1198))+(((0.0009)*cj2))+(((-1.0)*pz))+(((0.0718)*x1197)));
evalcond[4]=((((-1.0)*sj2*x1201))+((x1185*x1194))+((x1185*x1198))+((r21*x1200))+(((-1.0)*r20*x1202))+(((-1.0)*x1192*x1197)));
evalcond[5]=((((-1.0)*x1190*x1201))+x1204+((x1185*x1187))+((x1185*x1195))+(((-1.0)*r00*x1202))+((r01*x1200))+(((-1.0)*x1192*x1196)));
evalcond[6]=((((-1.0)*x1199*x1201))+((x1184*x1185))+(((-1.0)*x1189*x1192))+(((-1.0)*r10*x1202))+((r11*x1200))+((x1185*x1191))+(((-1.0)*x1205)));
evalcond[7]=((((-1.0)*x1190*x1203))+(((-0.1255)*cj1))+(((0.09746)*x1204))+(((-0.0001)*sj1))+(((-1.0)*x1186*x1187))+(((-1.0)*x1186*x1195))+(((-1.0)*px))+(((-1.0)*cj1*x1193))+(((-0.1158)*x1190))+(((0.0718)*x1196)));
evalcond[8]=((((0.0718)*x1189))+(((-0.1255)*sj1))+(((-1.0)*x1199*x1203))+(((-1.0)*x1186*x1191))+(((-1.0)*py))+(((-1.0)*x1184*x1186))+(((0.0001)*cj1))+(((-0.1158)*x1199))+(((-1.0)*sj1*x1193))+(((-0.09746)*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1206=(r00*sj6);
IkReal x1207=((1.0)*sj1);
IkReal x1208=(r02*sj5);
IkReal x1209=(cj1*cj5);
IkReal x1210=(r10*sj6);
IkReal x1211=(r12*sj5);
IkReal x1212=((1.0)*x1209);
IkReal x1213=(cj5*cj6*x1207);
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(cj2,-1);
if(!x1214.valid){
continue;
}
if( IKabs(((x1214.value)*(((((-1.0)*cj1*x1208))+(((-1.0)*x1207*x1211))+(((-1.0)*x1206*x1212))+(((-1.0)*cj6*r01*x1212))+(((-1.0)*r11*x1213))+(((-1.0)*cj5*x1207*x1210)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*x1206*x1207))+(((-1.0)*r01*x1213))+((cj6*r11*x1209))+((x1209*x1210))+((cj1*x1211))+(((-1.0)*x1207*x1208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1214.value)*(((((-1.0)*cj1*x1208))+(((-1.0)*x1207*x1211))+(((-1.0)*x1206*x1212))+(((-1.0)*cj6*r01*x1212))+(((-1.0)*r11*x1213))+(((-1.0)*cj5*x1207*x1210))))))+IKsqr(((((-1.0)*cj5*x1206*x1207))+(((-1.0)*r01*x1213))+((cj6*r11*x1209))+((x1209*x1210))+((cj1*x1211))+(((-1.0)*x1207*x1208))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1214.value)*(((((-1.0)*cj1*x1208))+(((-1.0)*x1207*x1211))+(((-1.0)*x1206*x1212))+(((-1.0)*cj6*r01*x1212))+(((-1.0)*r11*x1213))+(((-1.0)*cj5*x1207*x1210))))), ((((-1.0)*cj5*x1206*x1207))+(((-1.0)*r01*x1213))+((cj6*r11*x1209))+((x1209*x1210))+((cj1*x1211))+(((-1.0)*x1207*x1208))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1215=IKsin(j3);
IkReal x1216=IKcos(j3);
IkReal x1217=(cj6*r11);
IkReal x1218=(cj4*sj5);
IkReal x1219=((0.0718)*sj5);
IkReal x1220=(r00*sj6);
IkReal x1221=(cj5*cj6);
IkReal x1222=(cj5*r12);
IkReal x1223=(cj1*cj2);
IkReal x1224=(r10*sj6);
IkReal x1225=((1.0)*cj4);
IkReal x1226=((0.0009)*sj2);
IkReal x1227=(r20*sj6);
IkReal x1228=(cj6*r01);
IkReal x1229=(cj5*r02);
IkReal x1230=(cj5*r22);
IkReal x1231=(cj6*r21);
IkReal x1232=(cj2*sj1);
IkReal x1233=(sj4*sj6);
IkReal x1234=((1.0)*x1216);
IkReal x1235=((1.0)*cj6*sj4);
IkReal x1236=((0.09746)*x1216);
IkReal x1237=(sj1*x1215);
IkReal x1238=(cj1*x1215);
evalcond[0]=(((r22*sj5))+((cj5*x1227))+((sj2*x1215))+((r21*x1221)));
evalcond[1]=(((r01*x1221))+((r02*sj5))+((cj5*x1220))+((sj1*x1216))+((x1215*x1223)));
evalcond[2]=(((cj5*x1217))+((cj5*x1224))+((r12*sj5))+(((-1.0)*cj1*x1234))+((x1215*x1232)));
evalcond[3]=((-0.0215)+(((-0.1158)*sj2))+(((0.0718)*x1230))+(((0.0009)*cj2))+(((-1.0)*pz))+(((-1.0)*sj2*x1236))+(((-1.0)*x1219*x1227))+(((-1.0)*x1219*x1231)));
evalcond[4]=((((-1.0)*x1225*x1230))+(((-1.0)*r20*x1235))+((x1218*x1231))+((x1218*x1227))+(((-1.0)*sj2*x1234))+((r21*x1233)));
evalcond[5]=((((-1.0)*x1223*x1234))+(((-1.0)*r00*x1235))+x1237+(((-1.0)*x1225*x1229))+((r01*x1233))+((x1218*x1220))+((x1218*x1228)));
evalcond[6]=((((-1.0)*x1238))+(((-1.0)*x1222*x1225))+((x1218*x1224))+(((-1.0)*r10*x1235))+((r11*x1233))+((x1217*x1218))+(((-1.0)*x1232*x1234)));
evalcond[7]=((((-1.0)*x1223*x1236))+(((0.0718)*x1229))+(((-0.1255)*cj1))+(((-0.1158)*x1223))+(((-0.0001)*sj1))+(((-1.0)*px))+(((0.09746)*x1237))+(((-1.0)*cj1*x1226))+(((-1.0)*x1219*x1228))+(((-1.0)*x1219*x1220)));
evalcond[8]=((((-0.1255)*sj1))+(((0.0718)*x1222))+(((-0.1158)*x1232))+(((-1.0)*x1217*x1219))+(((-1.0)*py))+(((-0.09746)*x1238))+(((0.0001)*cj1))+(((-1.0)*sj1*x1226))+(((-1.0)*x1219*x1224))+(((-1.0)*x1232*x1236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1239=(cj5*sj4);
IkReal x1240=((1.0)*cj4);
IkReal x1241=(sj4*sj5);
CheckValue<IkReal> x1242=IKPowWithIntegerCheck(cj1,-1);
if(!x1242.valid){
continue;
}
if( IKabs(((x1242.value)*(((((-1.0)*cj6*r01*x1241))+(((-1.0)*r00*sj6*x1241))+((r02*x1239))+(((-1.0)*cj6*r00*x1240))+((cj4*r01*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1239))+((cj4*cj6*r20))+((cj6*r21*x1241))+((r20*sj6*x1241))+(((-1.0)*r21*sj6*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1242.value)*(((((-1.0)*cj6*r01*x1241))+(((-1.0)*r00*sj6*x1241))+((r02*x1239))+(((-1.0)*cj6*r00*x1240))+((cj4*r01*sj6))))))+IKsqr(((((-1.0)*r22*x1239))+((cj4*cj6*r20))+((cj6*r21*x1241))+((r20*sj6*x1241))+(((-1.0)*r21*sj6*x1240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1242.value)*(((((-1.0)*cj6*r01*x1241))+(((-1.0)*r00*sj6*x1241))+((r02*x1239))+(((-1.0)*cj6*r00*x1240))+((cj4*r01*sj6))))), ((((-1.0)*r22*x1239))+((cj4*cj6*r20))+((cj6*r21*x1241))+((r20*sj6*x1241))+(((-1.0)*r21*sj6*x1240))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x1243=IKsin(j2);
IkReal x1244=(cj5*sj4);
IkReal x1245=(cj4*sj6);
IkReal x1246=((1.0)*cj6);
IkReal x1247=(sj4*sj5);
IkReal x1248=((1.0)*sj6);
IkReal x1249=((1.0)*x1243);
evalcond[0]=((((-1.0)*cj4*r20*x1246))+(((-1.0)*r21*x1246*x1247))+(IKcos(j2))+((r21*x1245))+((r22*x1244))+(((-1.0)*r20*x1247*x1248)));
evalcond[1]=((((-1.0)*cj1*x1249))+((r01*x1245))+(((-1.0)*r00*x1247*x1248))+(((-1.0)*r01*x1246*x1247))+((r02*x1244))+(((-1.0)*cj4*r00*x1246)));
evalcond[2]=((((-1.0)*sj1*x1249))+(((-1.0)*r10*x1247*x1248))+(((-1.0)*cj4*r10*x1246))+((r11*x1245))+((r12*x1244))+(((-1.0)*r11*x1246*x1247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1250=(r00*sj6);
IkReal x1251=((1.0)*sj1);
IkReal x1252=(r02*sj5);
IkReal x1253=(r12*sj5);
IkReal x1254=(cj1*cj5);
IkReal x1255=(r10*sj6);
IkReal x1256=((1.0)*x1254);
IkReal x1257=(cj5*cj6*x1251);
if( IKabs(((((-1.0)*r11*x1257))+(((-1.0)*cj6*r01*x1256))+(((-1.0)*cj1*x1252))+(((-1.0)*cj5*x1251*x1255))+(((-1.0)*x1251*x1253))+(((-1.0)*x1250*x1256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r11*x1254))+(((-1.0)*cj5*x1250*x1251))+(((-1.0)*r01*x1257))+((cj1*x1253))+((x1254*x1255))+(((-1.0)*x1251*x1252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1257))+(((-1.0)*cj6*r01*x1256))+(((-1.0)*cj1*x1252))+(((-1.0)*cj5*x1251*x1255))+(((-1.0)*x1251*x1253))+(((-1.0)*x1250*x1256))))+IKsqr((((cj6*r11*x1254))+(((-1.0)*cj5*x1250*x1251))+(((-1.0)*r01*x1257))+((cj1*x1253))+((x1254*x1255))+(((-1.0)*x1251*x1252))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r11*x1257))+(((-1.0)*cj6*r01*x1256))+(((-1.0)*cj1*x1252))+(((-1.0)*cj5*x1251*x1255))+(((-1.0)*x1251*x1253))+(((-1.0)*x1250*x1256))), (((cj6*r11*x1254))+(((-1.0)*cj5*x1250*x1251))+(((-1.0)*r01*x1257))+((cj1*x1253))+((x1254*x1255))+(((-1.0)*x1251*x1252))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1258=IKsin(j3);
IkReal x1259=IKcos(j3);
IkReal x1260=(sj5*sj6);
IkReal x1261=(cj5*r12);
IkReal x1262=(cj5*cj6);
IkReal x1263=(cj5*sj6);
IkReal x1264=((1.0)*cj4);
IkReal x1265=(cj5*r02);
IkReal x1266=(sj4*sj6);
IkReal x1267=(sj1*x1258);
IkReal x1268=(cj1*x1258);
IkReal x1269=((1.0)*cj6*sj4);
IkReal x1270=((1.0)*x1259);
IkReal x1271=(cj6*r11*sj5);
IkReal x1272=(sj1*x1259);
IkReal x1273=(cj6*r01*sj5);
IkReal x1274=(cj1*x1270);
evalcond[0]=(x1272+x1268+((r02*sj5))+((r00*x1263))+((r01*x1262)));
evalcond[1]=(((r11*x1262))+x1267+(((-1.0)*x1274))+((r10*x1263))+((r12*sj5)));
evalcond[2]=((((-1.0)*x1264*x1265))+x1267+(((-1.0)*x1274))+(((-1.0)*r00*x1269))+((cj4*r00*x1260))+((r01*x1266))+((cj4*x1273)));
evalcond[3]=((((-0.0718)*x1273))+(((-0.0001)*sj1))+(((-0.09746)*cj1*x1259))+(((0.09746)*x1267))+(((0.0718)*x1265))+(((-1.0)*px))+(((-0.0718)*r00*x1260))+(((-0.2413)*cj1)));
evalcond[4]=((((-0.0718)*r10*x1260))+(((-0.09746)*x1272))+(((-0.0718)*x1271))+(((-0.09746)*x1268))+(((0.0718)*x1261))+(((-1.0)*py))+(((0.0001)*cj1))+(((-0.2413)*sj1)));
evalcond[5]=((((-1.0)*r10*x1269))+((r11*x1266))+(((-1.0)*x1261*x1264))+((cj4*r10*x1260))+(((-1.0)*sj1*x1270))+(((-1.0)*x1268))+((cj4*x1271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1275=(cj6*r01);
IkReal x1276=(r00*sj6);
IkReal x1277=(sj1*sj5);
IkReal x1278=(cj5*sj1);
IkReal x1279=(r10*sj6);
IkReal x1280=(cj1*cj5);
IkReal x1281=(cj1*sj5);
IkReal x1282=(cj6*r11);
IkReal x1283=((1.0)*x1278);
if( IKabs((((r12*x1277))+((r02*x1281))+((x1278*x1282))+((x1275*x1280))+((x1278*x1279))+((x1276*x1280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1279*x1280))+(((-1.0)*x1276*x1283))+(((-1.0)*x1275*x1283))+(((-1.0)*r02*x1277))+((x1280*x1282))+((r12*x1281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1277))+((r02*x1281))+((x1278*x1282))+((x1275*x1280))+((x1278*x1279))+((x1276*x1280))))+IKsqr((((x1279*x1280))+(((-1.0)*x1276*x1283))+(((-1.0)*x1275*x1283))+(((-1.0)*r02*x1277))+((x1280*x1282))+((r12*x1281))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r12*x1277))+((r02*x1281))+((x1278*x1282))+((x1275*x1280))+((x1278*x1279))+((x1276*x1280))), (((x1279*x1280))+(((-1.0)*x1276*x1283))+(((-1.0)*x1275*x1283))+(((-1.0)*r02*x1277))+((x1280*x1282))+((r12*x1281))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1284=IKcos(j3);
IkReal x1285=IKsin(j3);
IkReal x1286=(r00*sj6);
IkReal x1287=((0.0718)*sj5);
IkReal x1288=(cj5*r12);
IkReal x1289=(cj5*cj6);
IkReal x1290=(r10*sj6);
IkReal x1291=((1.0)*cj4);
IkReal x1292=(cj4*sj5);
IkReal x1293=(cj6*r11);
IkReal x1294=(cj6*r01);
IkReal x1295=(cj5*r02);
IkReal x1296=(sj4*sj6);
IkReal x1297=(sj1*x1284);
IkReal x1298=((1.0)*cj6*sj4);
IkReal x1299=(cj1*x1284);
IkReal x1300=(sj1*x1285);
IkReal x1301=(cj1*x1285);
IkReal x1302=((1.0)*x1301);
evalcond[0]=(x1297+((cj5*x1286))+(((-1.0)*x1302))+((r01*x1289))+((r02*sj5)));
evalcond[1]=(((r11*x1289))+(((-1.0)*x1300))+(((-1.0)*x1299))+((r12*sj5))+((cj5*x1290)));
evalcond[2]=(x1300+x1299+(((-1.0)*r00*x1298))+((x1286*x1292))+(((-1.0)*x1291*x1295))+((r01*x1296))+((x1292*x1294)));
evalcond[3]=(x1297+(((-1.0)*x1288*x1291))+((x1290*x1292))+(((-1.0)*x1302))+((r11*x1296))+((x1292*x1293))+(((-1.0)*r10*x1298)));
evalcond[4]=((((-1.0)*x1287*x1294))+(((0.09746)*x1300))+(((-0.0001)*sj1))+(((-1.0)*px))+(((-0.0097)*cj1))+(((-1.0)*x1286*x1287))+(((0.0718)*x1295))+(((0.09746)*x1299)));
evalcond[5]=((((-1.0)*x1287*x1293))+(((-1.0)*x1287*x1290))+(((-0.09746)*x1301))+(((-0.0097)*sj1))+(((0.0718)*x1288))+(((-1.0)*py))+(((0.0001)*cj1))+(((0.09746)*x1297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1303=(cj6*r11);
IkReal x1304=(r10*sj6);
IkReal x1305=((0.736712497434845)*sj5);
if( IKabs(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-10.2606197414324)*py))+(((-1.0)*x1303*x1305))+(((-1.0)*x1304*x1305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*x1303))+((cj5*x1304))+((r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-10.2606197414324)*py))+(((-1.0)*x1303*x1305))+(((-1.0)*x1304*x1305))))+IKsqr((((cj5*x1303))+((cj5*x1304))+((r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00102606197414324)+(((0.736712497434845)*cj5*r12))+(((-10.2606197414324)*py))+(((-1.0)*x1303*x1305))+(((-1.0)*x1304*x1305))), (((cj5*x1303))+((cj5*x1304))+((r12*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1306=IKsin(j3);
IkReal x1307=IKcos(j3);
IkReal x1308=(sj5*sj6);
IkReal x1309=(cj5*cj6);
IkReal x1310=(cj5*r12);
IkReal x1311=(cj5*sj6);
IkReal x1312=((1.0)*cj4);
IkReal x1313=(cj6*sj5);
IkReal x1314=(cj5*r02);
IkReal x1315=(cj5*r22);
IkReal x1316=(sj4*sj6);
IkReal x1317=((1.0)*x1307);
IkReal x1318=((1.0)*cj6*sj4);
IkReal x1319=(r11*x1313);
IkReal x1320=((0.09746)*x1307);
evalcond[0]=(((sj2*x1306))+((r22*sj5))+((r21*x1309))+((r20*x1311)));
evalcond[1]=(((r00*x1311))+((r02*sj5))+((cj2*x1306))+((r01*x1309)));
evalcond[2]=((((-1.0)*x1317))+((r10*x1311))+((r11*x1309))+((r12*sj5)));
evalcond[3]=((0.0001)+(((-0.0718)*r10*x1308))+(((-0.09746)*x1306))+(((-1.0)*py))+(((0.0718)*x1310))+(((-0.0718)*x1319)));
evalcond[4]=(((cj4*x1319))+(((-1.0)*x1306))+((r11*x1316))+((cj4*r10*x1308))+(((-1.0)*x1310*x1312))+(((-1.0)*r10*x1318)));
evalcond[5]=((-0.0215)+(((-0.1158)*sj2))+(((-0.0718)*r21*x1313))+(((0.0009)*cj2))+(((-1.0)*pz))+(((-1.0)*sj2*x1320))+(((0.0718)*x1315))+(((-0.0718)*r20*x1308)));
evalcond[6]=((((-1.0)*sj2*x1317))+(((-1.0)*r20*x1318))+((r21*x1316))+((cj4*r21*x1313))+((cj4*r20*x1308))+(((-1.0)*x1312*x1315)));
evalcond[7]=((((-1.0)*cj2*x1317))+((cj4*r01*x1313))+((cj4*r00*x1308))+((r01*x1316))+(((-1.0)*r00*x1318))+(((-1.0)*x1312*x1314)));
evalcond[8]=((-0.1255)+(((-0.0718)*r01*x1313))+(((-0.1158)*cj2))+(((-0.0009)*sj2))+(((-1.0)*px))+(((0.0718)*x1314))+(((-0.0718)*r00*x1308))+(((-1.0)*cj2*x1320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1321=((1.0)*cj5);
IkReal x1322=(r10*sj6);
IkReal x1323=(cj6*r11);
IkReal x1324=((0.736712497434845)*sj5);
if( IKabs(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+((x1323*x1324))+((x1322*x1324))+(((10.2606197414324)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1321*x1322))+(((-1.0)*x1321*x1323))+(((-1.0)*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+((x1323*x1324))+((x1322*x1324))+(((10.2606197414324)*py))))+IKsqr(((((-1.0)*x1321*x1322))+(((-1.0)*x1321*x1323))+(((-1.0)*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00102606197414324)+(((-0.736712497434845)*cj5*r12))+((x1323*x1324))+((x1322*x1324))+(((10.2606197414324)*py))), ((((-1.0)*x1321*x1322))+(((-1.0)*x1321*x1323))+(((-1.0)*r12*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1325=IKsin(j3);
IkReal x1326=IKcos(j3);
IkReal x1327=(sj5*sj6);
IkReal x1328=(cj5*cj6);
IkReal x1329=(cj5*r12);
IkReal x1330=(cj5*sj6);
IkReal x1331=((1.0)*cj4);
IkReal x1332=(cj6*sj5);
IkReal x1333=(cj5*r02);
IkReal x1334=(cj5*r22);
IkReal x1335=(sj4*sj6);
IkReal x1336=(sj2*x1326);
IkReal x1337=((1.0)*cj6*sj4);
IkReal x1338=(r11*x1332);
IkReal x1339=(cj2*x1326);
evalcond[0]=(x1326+((r11*x1328))+((r10*x1330))+((r12*sj5)));
evalcond[1]=(((sj2*x1325))+((r22*sj5))+((r20*x1330))+((r21*x1328)));
evalcond[2]=(((r01*x1328))+((r00*x1330))+((r02*sj5))+(((-1.0)*cj2*x1325)));
evalcond[3]=((-0.0001)+(((-0.0718)*r10*x1327))+(((0.09746)*x1325))+(((-0.0718)*x1338))+(((0.0718)*x1329))+(((-1.0)*py)));
evalcond[4]=(((cj4*x1338))+x1325+((r11*x1335))+(((-1.0)*x1329*x1331))+(((-1.0)*r10*x1337))+((cj4*r10*x1327)));
evalcond[5]=(x1339+((cj4*r01*x1332))+((cj4*r00*x1327))+((r01*x1335))+(((-1.0)*x1331*x1333))+(((-1.0)*r00*x1337)));
evalcond[6]=((-0.0215)+(((-0.1158)*sj2))+(((-0.09746)*x1336))+(((0.0718)*x1334))+(((0.0009)*cj2))+(((-1.0)*pz))+(((-0.0718)*r21*x1332))+(((-0.0718)*r20*x1327)));
evalcond[7]=((((-1.0)*x1336))+((r21*x1335))+(((-1.0)*x1331*x1334))+(((-1.0)*r20*x1337))+((cj4*r20*x1327))+((cj4*r21*x1332)));
evalcond[8]=((0.1255)+(((0.1158)*cj2))+(((0.09746)*x1339))+(((0.0718)*x1333))+(((-1.0)*px))+(((-0.0718)*r01*x1332))+(((0.0009)*sj2))+(((-0.0718)*r00*x1327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1340=(cj6*r21);
IkReal x1341=((0.736712497434845)*sj5);
IkReal x1342=((1.0)*cj5);
IkReal x1343=(r20*sj6);
if( IKabs(((((-1.0)*x1340*x1342))+(((-1.0)*x1342*x1343))+(((-1.0)*r22*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.40878309049867)+(((-1.0)*x1340*x1341))+(((-1.0)*x1341*x1343))+(((-10.2606197414324)*pz))+(((0.736712497434845)*cj5*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1340*x1342))+(((-1.0)*x1342*x1343))+(((-1.0)*r22*sj5))))+IKsqr(((-1.40878309049867)+(((-1.0)*x1340*x1341))+(((-1.0)*x1341*x1343))+(((-10.2606197414324)*pz))+(((0.736712497434845)*cj5*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1340*x1342))+(((-1.0)*x1342*x1343))+(((-1.0)*r22*sj5))), ((-1.40878309049867)+(((-1.0)*x1340*x1341))+(((-1.0)*x1341*x1343))+(((-10.2606197414324)*pz))+(((0.736712497434845)*cj5*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1344=IKcos(j3);
IkReal x1345=IKsin(j3);
IkReal x1346=(sj5*sj6);
IkReal x1347=(cj5*cj6);
IkReal x1348=(cj5*r12);
IkReal x1349=(cj5*sj6);
IkReal x1350=((1.0)*cj4);
IkReal x1351=((1.0)*cj1);
IkReal x1352=(cj6*sj5);
IkReal x1353=(cj5*r02);
IkReal x1354=(cj5*r22);
IkReal x1355=(sj4*sj6);
IkReal x1356=((1.0)*cj6*sj4);
IkReal x1357=(r11*x1352);
IkReal x1358=(sj1*x1345);
evalcond[0]=(x1345+((r22*sj5))+((r20*x1349))+((r21*x1347)));
evalcond[1]=(((sj1*x1344))+((r02*sj5))+((r00*x1349))+((r01*x1347)));
evalcond[2]=(((r12*sj5))+((r11*x1347))+(((-1.0)*x1344*x1351))+((r10*x1349)));
evalcond[3]=((-0.1373)+(((-0.0718)*r20*x1346))+(((-1.0)*pz))+(((-0.0718)*r21*x1352))+(((0.0718)*x1354))+(((-0.09746)*x1344)));
evalcond[4]=((((-1.0)*r20*x1356))+(((-1.0)*x1350*x1354))+((cj4*r21*x1352))+((cj4*r20*x1346))+((r21*x1355))+(((-1.0)*x1344)));
evalcond[5]=(x1358+(((-1.0)*x1350*x1353))+(((-1.0)*r00*x1356))+((cj4*r01*x1352))+((r01*x1355))+((cj4*r00*x1346)));
evalcond[6]=((((-0.0001)*sj1))+(((-0.1264)*cj1))+(((-0.0718)*r01*x1352))+(((-1.0)*px))+(((-0.0718)*r00*x1346))+(((0.0718)*x1353))+(((0.09746)*x1358)));
evalcond[7]=((((0.0718)*x1348))+(((-0.0718)*r10*x1346))+(((-0.1264)*sj1))+(((-1.0)*py))+(((0.0001)*cj1))+(((-0.0718)*x1357))+(((-0.09746)*cj1*x1345)));
evalcond[8]=((((-1.0)*r10*x1356))+((cj4*r10*x1346))+(((-1.0)*x1345*x1351))+((cj4*x1357))+((r11*x1355))+(((-1.0)*x1348*x1350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1359=(cj6*r21);
IkReal x1360=((0.736712497434845)*sj5);
IkReal x1361=(r20*sj6);
if( IKabs((((r22*sj5))+((cj5*x1359))+((cj5*x1361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.967576441617074)+((x1360*x1361))+((x1359*x1360))+(((10.2606197414324)*pz))+(((-0.736712497434845)*cj5*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj5))+((cj5*x1359))+((cj5*x1361))))+IKsqr(((-0.967576441617074)+((x1360*x1361))+((x1359*x1360))+(((10.2606197414324)*pz))+(((-0.736712497434845)*cj5*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r22*sj5))+((cj5*x1359))+((cj5*x1361))), ((-0.967576441617074)+((x1360*x1361))+((x1359*x1360))+(((10.2606197414324)*pz))+(((-0.736712497434845)*cj5*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1362=IKcos(j3);
IkReal x1363=IKsin(j3);
IkReal x1364=(sj5*sj6);
IkReal x1365=(cj5*cj6);
IkReal x1366=(cj5*r12);
IkReal x1367=(cj5*sj6);
IkReal x1368=((1.0)*cj4);
IkReal x1369=((1.0)*cj1);
IkReal x1370=(cj6*sj5);
IkReal x1371=(cj5*r02);
IkReal x1372=(cj5*r22);
IkReal x1373=(sj4*sj6);
IkReal x1374=((1.0)*cj6*sj4);
IkReal x1375=(r11*x1370);
IkReal x1376=(sj1*x1363);
evalcond[0]=((((-1.0)*x1363))+((r22*sj5))+((r20*x1367))+((r21*x1365)));
evalcond[1]=(((sj1*x1362))+((r02*sj5))+((r01*x1365))+((r00*x1367)));
evalcond[2]=(((r10*x1367))+(((-1.0)*x1362*x1369))+((r11*x1365))+((r12*sj5)));
evalcond[3]=((0.0943)+(((-0.0718)*r20*x1364))+(((-0.0718)*r21*x1370))+(((-1.0)*pz))+(((0.0718)*x1372))+(((0.09746)*x1362)));
evalcond[4]=(x1362+(((-1.0)*r20*x1374))+((cj4*r20*x1364))+((r21*x1373))+((cj4*r21*x1370))+(((-1.0)*x1368*x1372)));
evalcond[5]=(x1376+(((-1.0)*r00*x1374))+((cj4*r01*x1370))+(((-1.0)*x1368*x1371))+((r01*x1373))+((cj4*r00*x1364)));
evalcond[6]=((((0.09746)*x1376))+(((-0.0001)*sj1))+(((-0.0718)*r01*x1370))+(((-1.0)*px))+(((-0.0718)*r00*x1364))+(((0.0718)*x1371))+(((-0.1246)*cj1)));
evalcond[7]=((((-0.1246)*sj1))+(((-1.0)*py))+(((-0.0718)*x1375))+(((0.0001)*cj1))+(((0.0718)*x1366))+(((-0.09746)*cj1*x1363))+(((-0.0718)*r10*x1364)));
evalcond[8]=((((-1.0)*x1366*x1368))+((cj4*r10*x1364))+((cj4*x1375))+((r11*x1373))+(((-1.0)*r10*x1374))+(((-1.0)*x1363*x1369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1382=IKPowWithIntegerCheck(sj2,-1);
if(!x1382.valid){
continue;
}
IkReal x1377=x1382.value;
IkReal x1378=((1.0)*sj5);
IkReal x1379=(cj1*cj2);
IkReal x1380=(cj5*r20*sj6);
IkReal x1381=((1.0)*cj5*cj6);
CheckValue<IkReal> x1383=IKPowWithIntegerCheck(sj1,-1);
if(!x1383.valid){
continue;
}
if( IKabs((x1377*(((((-1.0)*r21*x1381))+(((-1.0)*r22*x1378))+(((-1.0)*x1380)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1377*(x1383.value)*(((((-1.0)*r01*sj2*x1381))+((cj5*cj6*r21*x1379))+(((-1.0)*cj5*r00*sj2*sj6))+((x1379*x1380))+((r22*sj5*x1379))+(((-1.0)*r02*sj2*x1378)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1377*(((((-1.0)*r21*x1381))+(((-1.0)*r22*x1378))+(((-1.0)*x1380))))))+IKsqr((x1377*(x1383.value)*(((((-1.0)*r01*sj2*x1381))+((cj5*cj6*r21*x1379))+(((-1.0)*cj5*r00*sj2*sj6))+((x1379*x1380))+((r22*sj5*x1379))+(((-1.0)*r02*sj2*x1378))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1377*(((((-1.0)*r21*x1381))+(((-1.0)*r22*x1378))+(((-1.0)*x1380))))), (x1377*(x1383.value)*(((((-1.0)*r01*sj2*x1381))+((cj5*cj6*r21*x1379))+(((-1.0)*cj5*r00*sj2*sj6))+((x1379*x1380))+((r22*sj5*x1379))+(((-1.0)*r02*sj2*x1378))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1384=IKsin(j3);
IkReal x1385=IKcos(j3);
IkReal x1386=(cj6*r11);
IkReal x1387=(cj4*sj5);
IkReal x1388=((0.0718)*sj5);
IkReal x1389=(r00*sj6);
IkReal x1390=(cj5*cj6);
IkReal x1391=(cj5*r12);
IkReal x1392=(cj1*cj2);
IkReal x1393=(r10*sj6);
IkReal x1394=((1.0)*cj4);
IkReal x1395=((0.0009)*sj2);
IkReal x1396=(r20*sj6);
IkReal x1397=(cj6*r01);
IkReal x1398=(cj5*r02);
IkReal x1399=(cj5*r22);
IkReal x1400=(cj6*r21);
IkReal x1401=(cj2*sj1);
IkReal x1402=(sj4*sj6);
IkReal x1403=((1.0)*x1385);
IkReal x1404=((1.0)*cj6*sj4);
IkReal x1405=((0.09746)*x1385);
IkReal x1406=(sj1*x1384);
IkReal x1407=(cj1*x1384);
evalcond[0]=(((r22*sj5))+((r21*x1390))+((cj5*x1396))+((sj2*x1384)));
evalcond[1]=(((r02*sj5))+((sj1*x1385))+((cj5*x1389))+((r01*x1390))+((x1384*x1392)));
evalcond[2]=((((-1.0)*cj1*x1403))+((cj5*x1386))+((cj5*x1393))+((r12*sj5))+((x1384*x1401)));
evalcond[3]=((-0.0215)+(((-0.1158)*sj2))+(((-1.0)*x1388*x1400))+(((0.0009)*cj2))+(((-1.0)*pz))+(((-1.0)*x1388*x1396))+(((-1.0)*sj2*x1405))+(((0.0718)*x1399)));
evalcond[4]=((((-1.0)*x1394*x1399))+((x1387*x1400))+((r21*x1402))+((x1387*x1396))+(((-1.0)*r20*x1404))+(((-1.0)*sj2*x1403)));
evalcond[5]=((((-1.0)*x1394*x1398))+(((-1.0)*r00*x1404))+((x1387*x1389))+((r01*x1402))+((x1387*x1397))+x1406+(((-1.0)*x1392*x1403)));
evalcond[6]=((((-1.0)*x1407))+(((-1.0)*x1391*x1394))+((r11*x1402))+((x1387*x1393))+(((-1.0)*x1401*x1403))+(((-1.0)*r10*x1404))+((x1386*x1387)));
evalcond[7]=((((-0.1255)*cj1))+(((-0.0001)*sj1))+(((-0.1158)*x1392))+(((0.09746)*x1406))+(((-1.0)*px))+(((-1.0)*cj1*x1395))+(((-1.0)*x1392*x1405))+(((-1.0)*x1388*x1397))+(((-1.0)*x1388*x1389))+(((0.0718)*x1398)));
evalcond[8]=((((-0.1255)*sj1))+(((-0.1158)*x1401))+(((-1.0)*py))+(((-1.0)*x1401*x1405))+(((0.0001)*cj1))+(((-1.0)*x1388*x1393))+(((-1.0)*x1386*x1388))+(((-1.0)*sj1*x1395))+(((-0.09746)*x1407))+(((0.0718)*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(sj2,-1);
if(!x1413.valid){
continue;
}
IkReal x1408=x1413.value;
IkReal x1409=(r20*sj6);
IkReal x1410=((3590.0)*sj5);
IkReal x1411=((1.0)*cj5);
IkReal x1412=(cj6*r21);
if( IKabs((x1408*(((((-1.0)*x1411*x1412))+(((-1.0)*r22*sj5))+(((-1.0)*x1409*x1411)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000205212394828648)*x1408*(((-1075.0)+(((3590.0)*cj5*r22))+(((45.0)*cj2))+(((-1.0)*x1410*x1412))+(((-5790.0)*sj2))+(((-1.0)*x1409*x1410))+(((-50000.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1408*(((((-1.0)*x1411*x1412))+(((-1.0)*r22*sj5))+(((-1.0)*x1409*x1411))))))+IKsqr(((0.000205212394828648)*x1408*(((-1075.0)+(((3590.0)*cj5*r22))+(((45.0)*cj2))+(((-1.0)*x1410*x1412))+(((-5790.0)*sj2))+(((-1.0)*x1409*x1410))+(((-50000.0)*pz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1408*(((((-1.0)*x1411*x1412))+(((-1.0)*r22*sj5))+(((-1.0)*x1409*x1411))))), ((0.000205212394828648)*x1408*(((-1075.0)+(((3590.0)*cj5*r22))+(((45.0)*cj2))+(((-1.0)*x1410*x1412))+(((-5790.0)*sj2))+(((-1.0)*x1409*x1410))+(((-50000.0)*pz))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1414=IKsin(j3);
IkReal x1415=IKcos(j3);
IkReal x1416=(cj6*r11);
IkReal x1417=(cj4*sj5);
IkReal x1418=((0.0718)*sj5);
IkReal x1419=(r00*sj6);
IkReal x1420=(cj5*cj6);
IkReal x1421=(cj5*r12);
IkReal x1422=(cj1*cj2);
IkReal x1423=(r10*sj6);
IkReal x1424=((1.0)*cj4);
IkReal x1425=((0.0009)*sj2);
IkReal x1426=(r20*sj6);
IkReal x1427=(cj6*r01);
IkReal x1428=(cj5*r02);
IkReal x1429=(cj5*r22);
IkReal x1430=(cj6*r21);
IkReal x1431=(cj2*sj1);
IkReal x1432=(sj4*sj6);
IkReal x1433=((1.0)*x1415);
IkReal x1434=((1.0)*cj6*sj4);
IkReal x1435=((0.09746)*x1415);
IkReal x1436=(sj1*x1414);
IkReal x1437=(cj1*x1414);
evalcond[0]=(((sj2*x1414))+((r21*x1420))+((r22*sj5))+((cj5*x1426)));
evalcond[1]=(((r01*x1420))+((x1414*x1422))+((cj5*x1419))+((r02*sj5))+((sj1*x1415)));
evalcond[2]=(((cj5*x1416))+(((-1.0)*cj1*x1433))+((r12*sj5))+((cj5*x1423))+((x1414*x1431)));
evalcond[3]=((-0.0215)+(((-0.1158)*sj2))+(((0.0718)*x1429))+(((-1.0)*x1418*x1426))+(((0.0009)*cj2))+(((-1.0)*pz))+(((-1.0)*x1418*x1430))+(((-1.0)*sj2*x1435)));
evalcond[4]=((((-1.0)*x1424*x1429))+((x1417*x1430))+((r21*x1432))+(((-1.0)*r20*x1434))+((x1417*x1426))+(((-1.0)*sj2*x1433)));
evalcond[5]=((((-1.0)*x1422*x1433))+((x1417*x1419))+(((-1.0)*x1424*x1428))+(((-1.0)*r00*x1434))+((r01*x1432))+x1436+((x1417*x1427)));
evalcond[6]=((((-1.0)*x1421*x1424))+(((-1.0)*x1437))+(((-1.0)*x1431*x1433))+((x1416*x1417))+((r11*x1432))+(((-1.0)*r10*x1434))+((x1417*x1423)));
evalcond[7]=((((-1.0)*x1422*x1435))+(((-0.1255)*cj1))+(((-0.0001)*sj1))+(((0.0718)*x1428))+(((-1.0)*x1418*x1427))+(((-1.0)*px))+(((-1.0)*x1418*x1419))+(((0.09746)*x1436))+(((-1.0)*cj1*x1425))+(((-0.1158)*x1422)));
evalcond[8]=((((-0.1255)*sj1))+(((-0.1158)*x1431))+(((-1.0)*x1431*x1435))+(((-1.0)*x1416*x1418))+(((0.0718)*x1421))+(((-1.0)*x1418*x1423))+(((-1.0)*sj1*x1425))+(((-1.0)*py))+(((0.0001)*cj1))+(((-0.09746)*x1437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1438=(r00*sj6);
IkReal x1439=((1.0)*sj1);
IkReal x1440=(r02*sj5);
IkReal x1441=(cj1*cj5);
IkReal x1442=(r10*sj6);
IkReal x1443=(r12*sj5);
IkReal x1444=((1.0)*x1441);
IkReal x1445=(cj5*cj6*x1439);
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(cj2,-1);
if(!x1446.valid){
continue;
}
if( IKabs(((x1446.value)*(((((-1.0)*cj6*r01*x1444))+(((-1.0)*x1438*x1444))+(((-1.0)*x1439*x1443))+(((-1.0)*r11*x1445))+(((-1.0)*cj1*x1440))+(((-1.0)*cj5*x1439*x1442)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1443))+((x1441*x1442))+(((-1.0)*r01*x1445))+(((-1.0)*x1439*x1440))+(((-1.0)*cj5*x1438*x1439))+((cj6*r11*x1441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1446.value)*(((((-1.0)*cj6*r01*x1444))+(((-1.0)*x1438*x1444))+(((-1.0)*x1439*x1443))+(((-1.0)*r11*x1445))+(((-1.0)*cj1*x1440))+(((-1.0)*cj5*x1439*x1442))))))+IKsqr((((cj1*x1443))+((x1441*x1442))+(((-1.0)*r01*x1445))+(((-1.0)*x1439*x1440))+(((-1.0)*cj5*x1438*x1439))+((cj6*r11*x1441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1446.value)*(((((-1.0)*cj6*r01*x1444))+(((-1.0)*x1438*x1444))+(((-1.0)*x1439*x1443))+(((-1.0)*r11*x1445))+(((-1.0)*cj1*x1440))+(((-1.0)*cj5*x1439*x1442))))), (((cj1*x1443))+((x1441*x1442))+(((-1.0)*r01*x1445))+(((-1.0)*x1439*x1440))+(((-1.0)*cj5*x1438*x1439))+((cj6*r11*x1441))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1447=IKsin(j3);
IkReal x1448=IKcos(j3);
IkReal x1449=(cj6*r11);
IkReal x1450=(cj4*sj5);
IkReal x1451=((0.0718)*sj5);
IkReal x1452=(r00*sj6);
IkReal x1453=(cj5*cj6);
IkReal x1454=(cj5*r12);
IkReal x1455=(cj1*cj2);
IkReal x1456=(r10*sj6);
IkReal x1457=((1.0)*cj4);
IkReal x1458=((0.0009)*sj2);
IkReal x1459=(r20*sj6);
IkReal x1460=(cj6*r01);
IkReal x1461=(cj5*r02);
IkReal x1462=(cj5*r22);
IkReal x1463=(cj6*r21);
IkReal x1464=(cj2*sj1);
IkReal x1465=(sj4*sj6);
IkReal x1466=((1.0)*x1448);
IkReal x1467=((1.0)*cj6*sj4);
IkReal x1468=((0.09746)*x1448);
IkReal x1469=(sj1*x1447);
IkReal x1470=(cj1*x1447);
evalcond[0]=(((cj5*x1459))+((r22*sj5))+((r21*x1453))+((sj2*x1447)));
evalcond[1]=(((cj5*x1452))+((x1447*x1455))+((sj1*x1448))+((r02*sj5))+((r01*x1453)));
evalcond[2]=((((-1.0)*cj1*x1466))+((cj5*x1456))+((x1447*x1464))+((r12*sj5))+((cj5*x1449)));
evalcond[3]=((-0.0215)+(((-0.1158)*sj2))+(((0.0718)*x1462))+(((0.0009)*cj2))+(((-1.0)*pz))+(((-1.0)*x1451*x1459))+(((-1.0)*sj2*x1468))+(((-1.0)*x1451*x1463)));
evalcond[4]=(((x1450*x1459))+((x1450*x1463))+(((-1.0)*r20*x1467))+(((-1.0)*x1457*x1462))+((r21*x1465))+(((-1.0)*sj2*x1466)));
evalcond[5]=(((x1450*x1452))+((r01*x1465))+((x1450*x1460))+(((-1.0)*x1455*x1466))+(((-1.0)*r00*x1467))+(((-1.0)*x1457*x1461))+x1469);
evalcond[6]=(((x1450*x1456))+(((-1.0)*x1454*x1457))+(((-1.0)*x1470))+(((-1.0)*x1464*x1466))+((r11*x1465))+((x1449*x1450))+(((-1.0)*r10*x1467)));
evalcond[7]=((((0.0718)*x1461))+(((-0.1255)*cj1))+(((-0.1158)*x1455))+(((-0.0001)*sj1))+(((0.09746)*x1469))+(((-1.0)*cj1*x1458))+(((-1.0)*x1455*x1468))+(((-1.0)*px))+(((-1.0)*x1451*x1452))+(((-1.0)*x1451*x1460)));
evalcond[8]=((((-0.1255)*sj1))+(((-0.09746)*x1470))+(((-1.0)*x1464*x1468))+(((-1.0)*py))+(((-0.1158)*x1464))+(((0.0001)*cj1))+(((0.0718)*x1454))+(((-1.0)*sj1*x1458))+(((-1.0)*x1451*x1456))+(((-1.0)*x1449*x1451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - cyton_gamma_1500 (3b79d5275af2e31d2180af15798e3b35)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
